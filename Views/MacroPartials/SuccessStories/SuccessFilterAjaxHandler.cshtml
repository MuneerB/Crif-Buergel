@inherits Umbraco.Web.Macros.PartialViewMacroPage
@using RJP.MultiUrlPicker.Models
@using CrifAustria.Utils
@{
    IPublishedContent newsHome = null;
    IPublishedContent industryNode = null;
    var newsId = 0;
    var takeCount = 4;
    bool excludeCurrentNode;
    if (!string.IsNullOrEmpty(Request["newsId"]))
    {
        newsHome = Umbraco.TypedContent(Request["newsId"]);
    }
    else
    {
        newsHome = Model.Content;
    }
    if (!string.IsNullOrEmpty(Request["industryId"]))
    {
        industryNode = Umbraco.TypedContent(Request["industryId"]);
    }
    else
    {
        var industryNodeId = int.Parse(Model.MacroParameters["industryNodeId"].ToString());
        industryNode = Umbraco.TypedContent(industryNodeId);
    }
    if (Request["newsId"] != null && Request["newsId"] != "")
    {
        newsId = int.Parse(Request["newsId"].ToString());
    }
    else
    {
        newsId = Model.Content.Id;
    }
    if (Request["takeCount"] != null && Request["takeCount"] != "")
    {
        takeCount = int.Parse(Request["takeCount"].ToString());
    }
    List<int> featuredNewsNodeId = new List<int>();
   
   IEnumerable<IPublishedContent> newsNodes = newsHome.Children().OrderByDescending(x => x.GetPropertyValue("publicationDate"));
   newsNodes = newsNodes.Where(x => x.HasValue("industryTags")).ToList();
                 newsNodes = newsNodes.Where(x => x.GetPropertyValue<string>("industryTags")
                        .Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).Contains(industryNode.Id.ToString())).ToList();
    bool NoItem =true;
    if (newsNodes != null && newsNodes.Any())
    {
        NoItem = false;
        if (Request["ccfphaseFilter"] != null && Request["ccfphaseFilter"] != "" && Request["ccfphaseFilter"] != "null")
        {
            string ccfPhase = Request["ccfphaseFilter"].ToString();
            newsNodes = newsNodes.Where(x => x.HasValue("freameworkPhaseTags")).ToList();
            if (ccfPhase != "")
            {
                newsNodes = newsNodes.Where(x => x.GetPropertyValue<string>("freameworkPhaseTags")
                .Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).Contains(ccfPhase)).ToList();
            }
        }
        int totalItems = newsNodes.Count();
        int page = 1;
        int pageSize = newsHome.HasValue("numberOfNews") ? newsHome.GetPropertyValue<int>("numberOfNews") : 4;
        string pageIndex = Request["page"];
        string currentClass = "";
        int totalPages = (int)Math.Ceiling((double)totalItems / (double)pageSize);
        if (!int.TryParse(pageIndex, out page) || page <= 0)
        {
            page = 1;
        }
        string nextLinkCssClass = "";
        string prevLinkCssClass = "";
        if (newsNodes != null && newsNodes.Any())
        {
            NoItem = false;
            <ul class="list-unstyled article-list clearfix border-grey-bottom @totalItems">
                    @foreach (var news in newsNodes.WhereNotNull().Take(takeCount))
                    {
                        string shortDescription = news.HasValue("shortDescription")
                            ? news.GetPropertyValue<string>("shortDescription")
                            : Common.TruncateAtWord(news.GetPropertyValue<string>("bodyText"), 130, "...");
                        string title = news.HasValue("title")
                            ? news.GetPropertyValue<string>("title")
                            : news.Name;

                            <li class="clearfix">
							    <article class="article-structure">
                                    @if (news.HasValue("thumbnailImage"))
                                    {
                                        var newsImagesList = news.GetPropertyValue<string>("thumbnailImage")
                                                            .Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse);
                                        var newsImagesCollection = Umbraco.TypedMedia(newsImagesList).Where(x => x != null);
                                        if (newsImagesCollection != null && newsImagesCollection.Any())
                                        {
                                            var imageItem = newsImagesCollection.FirstOrDefault();
                                            <figure class="article-image resize-image pull-left">
									            <img src="@imageItem.Url" alt="@imageItem.Name">	
								            </figure>
                                        }
                                    }
                                    <section class="article-content col-sm-8">
                                         <h3 class="h4"><a href="@news.Url" class="clr-drk-blu">@title</a></h3>
                                        @if (news.HasValue("thumbnailImage"))
                                        {
                                            var thumbnailImage = Umbraco.TypedMedia(news.GetPropertyValue("thumbnailImage"));
                                            if(thumbnailImage != null)
                                            {
                                                <figure class="hidden-sm hidden-lg hidden-md mob-img">
                                                    <img src="@thumbnailImage.Url" alt="@thumbnailImage.Name" class="">
                                                </figure>
                                            }           
                                        }
                                        <div style="word-wrap: break-word;" class="article-caption"><p>@Html.Raw(shortDescription)</p></div>
                                        <a href="@news.Url" rel="nofollow" class="link clr-drk-blu">@Umbraco.Field("#Read More", altText: "Read More")<i class="fa fa-caret-right"></i></a>
                                </section>
                            </article>
                        </li>
                        }
                    </ul>
                    @*<div class="loader" id="loader">
                        <img src="/images/default.gif" alt="loader">
                    </div>*@
                if (totalPages > 1)
                {
                    if (page < totalPages)
                    {
                        <div class="loadmore text-center">
                            <a href="#" class="clr-drk-blu loadmore-link" data-page="@(page+1)" data-id="@newsId">@Umbraco.Field("#Load More", altText: "Load More")</a>
                        </div>
                    }
                }
            }
            else
             {
                 NoItem = true;
             }   
            <input type="text" id="txtPage" value="@page" style="display:none;" />
            <input type="text" id="txtTotlaPage" value="@totalPages" style="display:none;" />
}
if(NoItem)
{
    if (newsHome.HasValue("noItemsFoundMessage"))
    {
        <p class="text-center">@newsHome.GetPropertyValue("noItemsFoundMessage")</p>
    }
    else
    {
        <p class="text-center">No items to be displayed</p>
    }
} 
}

