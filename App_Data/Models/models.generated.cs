//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.2.93
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

[assembly: PureLiveAssembly, System.Reflection.AssemblyVersion("0.0.0.1")]

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>ezSearch</summary>
	[PublishedContentModel("ezSearch")]
	public partial class EzSearch : PublishedContentModel, IPages, IPagesWithBanner
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "ezSearch";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public EzSearch(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<EzSearch, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide page?
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}

		///<summary>
		/// Background Image: Select the background image for the section. Image size: 1600 X 500 px
		///</summary>
		[ImplementPropertyType("backgroundImage")]
		public object BackgroundImage
		{
			get { return PagesWithBanner.GetBackgroundImage(this); }
		}

		///<summary>
		/// Banner description
		///</summary>
		[ImplementPropertyType("bannerDescription")]
		public IHtmlString BannerDescription
		{
			get { return PagesWithBanner.GetBannerDescription(this); }
		}

		///<summary>
		/// Banner Text Color: style for the text's color over the image(default:white)
		///</summary>
		[ImplementPropertyType("bannerTextColor")]
		public object BannerTextColor
		{
			get { return PagesWithBanner.GetBannerTextColor(this); }
		}

		///<summary>
		/// Banner Title
		///</summary>
		[ImplementPropertyType("bannerTitle")]
		public string BannerTitle
		{
			get { return PagesWithBanner.GetBannerTitle(this); }
		}

		///<summary>
		/// Mobile Background Image: This image will show as the background image for mobile devices. Image dimension 1099px X 548px [mobileBackgroundImage]
		///</summary>
		[ImplementPropertyType("mobileBackgroundImage")]
		public object MobileBackgroundImage
		{
			get { return PagesWithBanner.GetMobileBackgroundImage(this); }
		}
	}

	// Mixin content Type 1055 with alias "ContentMaster"
	/// <summary>Content Master</summary>
	public partial interface IContentMaster : IPublishedContent
	{
		/// <summary>Browser Title</summary>
		string BrowserTitle { get; }

		/// <summary>Disable Link</summary>
		bool DisableLink { get; }

		/// <summary>External Redirect</summary>
		string ExternalRedirect { get; }

		/// <summary>Hide child pages in main navigation</summary>
		bool HideChildPagesInMainNavigation { get; }

		/// <summary>Hide From Search</summary>
		bool HideFromSearch { get; }

		/// <summary>Hide From Sitemap</summary>
		bool HideFromSitemap { get; }

		/// <summary>Menu Title</summary>
		string MenuAlternateText { get; }

		/// <summary>Meta Description</summary>
		string MetaDescription { get; }

		/// <summary>Meta Keywords</summary>
		string MetaKeywords { get; }

		/// <summary>Social Media Description</summary>
		string SocialMediaDescription { get; }

		/// <summary>Social Media Image</summary>
		object SocialMediaImage { get; }

		/// <summary>Social Media Title</summary>
		string SocialMediaTitle { get; }

		/// <summary>Redirect to internal page without Changing URL</summary>
		object UmbracoInternalRedirectId { get; }

		/// <summary>Hide From Navigation</summary>
		bool UmbracoNaviHide { get; }

		/// <summary>Redirect to an Internal page</summary>
		object UmbracoRedirect { get; }

		/// <summary>Url Alias</summary>
		string UmbracoUrlAlias { get; }

		/// <summary>Url Name</summary>
		string UmbracoUrlName { get; }
	}

	/// <summary>Content Master</summary>
	[PublishedContentModel("ContentMaster")]
	public partial class ContentMaster : PublishedContentModel, IContentMaster
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "ContentMaster";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContentMaster(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContentMaster, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return GetBrowserTitle(this); }
		}

		/// <summary>Static getter for Browser Title</summary>
		public static string GetBrowserTitle(IContentMaster that) { return that.GetPropertyValue<string>("browserTitle"); }

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return GetDisableLink(this); }
		}

		/// <summary>Static getter for Disable Link</summary>
		public static bool GetDisableLink(IContentMaster that) { return that.GetPropertyValue<bool>("disableLink"); }

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return GetExternalRedirect(this); }
		}

		/// <summary>Static getter for External Redirect</summary>
		public static string GetExternalRedirect(IContentMaster that) { return that.GetPropertyValue<string>("externalRedirect"); }

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return GetHideChildPagesInMainNavigation(this); }
		}

		/// <summary>Static getter for Hide child pages in main navigation</summary>
		public static bool GetHideChildPagesInMainNavigation(IContentMaster that) { return that.GetPropertyValue<bool>("hideChildPagesInMainNavigation"); }

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return GetHideFromSearch(this); }
		}

		/// <summary>Static getter for Hide From Search</summary>
		public static bool GetHideFromSearch(IContentMaster that) { return that.GetPropertyValue<bool>("hideFromSearch"); }

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return GetHideFromSitemap(this); }
		}

		/// <summary>Static getter for Hide From Sitemap</summary>
		public static bool GetHideFromSitemap(IContentMaster that) { return that.GetPropertyValue<bool>("hideFromSitemap"); }

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return GetMenuAlternateText(this); }
		}

		/// <summary>Static getter for Menu Title</summary>
		public static string GetMenuAlternateText(IContentMaster that) { return that.GetPropertyValue<string>("menuAlternateText"); }

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return GetMetaDescription(this); }
		}

		/// <summary>Static getter for Meta Description</summary>
		public static string GetMetaDescription(IContentMaster that) { return that.GetPropertyValue<string>("metaDescription"); }

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return GetMetaKeywords(this); }
		}

		/// <summary>Static getter for Meta Keywords</summary>
		public static string GetMetaKeywords(IContentMaster that) { return that.GetPropertyValue<string>("metaKeywords"); }

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return GetSocialMediaDescription(this); }
		}

		/// <summary>Static getter for Social Media Description</summary>
		public static string GetSocialMediaDescription(IContentMaster that) { return that.GetPropertyValue<string>("socialMediaDescription"); }

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return GetSocialMediaImage(this); }
		}

		/// <summary>Static getter for Social Media Image</summary>
		public static object GetSocialMediaImage(IContentMaster that) { return that.GetPropertyValue("socialMediaImage"); }

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return GetSocialMediaTitle(this); }
		}

		/// <summary>Static getter for Social Media Title</summary>
		public static string GetSocialMediaTitle(IContentMaster that) { return that.GetPropertyValue<string>("socialMediaTitle"); }

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return GetUmbracoInternalRedirectId(this); }
		}

		/// <summary>Static getter for Redirect to internal page without Changing URL</summary>
		public static object GetUmbracoInternalRedirectId(IContentMaster that) { return that.GetPropertyValue("umbracoInternalRedirectId"); }

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return GetUmbracoNaviHide(this); }
		}

		/// <summary>Static getter for Hide From Navigation</summary>
		public static bool GetUmbracoNaviHide(IContentMaster that) { return that.GetPropertyValue<bool>("umbracoNaviHide"); }

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return GetUmbracoRedirect(this); }
		}

		/// <summary>Static getter for Redirect to an Internal page</summary>
		public static object GetUmbracoRedirect(IContentMaster that) { return that.GetPropertyValue("umbracoRedirect"); }

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return GetUmbracoUrlAlias(this); }
		}

		/// <summary>Static getter for Url Alias</summary>
		public static string GetUmbracoUrlAlias(IContentMaster that) { return that.GetPropertyValue<string>("umbracoUrlAlias"); }

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return GetUmbracoUrlName(this); }
		}

		/// <summary>Static getter for Url Name</summary>
		public static string GetUmbracoUrlName(IContentMaster that) { return that.GetPropertyValue<string>("umbracoUrlName"); }
	}

	/// <summary>Home</summary>
	[PublishedContentModel("home")]
	public partial class Home : PublishedContentModel, IContentMaster, IPagesWithNewsBoxes
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "home";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Home(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Home, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// About Us Description: The text will appears about us box in home page
		///</summary>
		[ImplementPropertyType("aboutUsDescription")]
		public IHtmlString AboutUsDescription
		{
			get { return this.GetPropertyValue<IHtmlString>("aboutUsDescription"); }
		}

		///<summary>
		/// About us LinK: [aboutUsLinK]
		///</summary>
		[ImplementPropertyType("aboutUsLinK")]
		public RJP.MultiUrlPicker.Models.MultiUrls AboutUsLinK
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("aboutUsLinK"); }
		}

		///<summary>
		/// Best Way To Reach Options: This will populated in Best Way To Reach Drop down inside the forms
		///</summary>
		[ImplementPropertyType("bestWayToReachOptions")]
		public Archetype.Models.ArchetypeModel BestWayToReachOptions
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("bestWayToReachOptions"); }
		}

		///<summary>
		/// Cookie Banner Text: [cookieBannerText]
		///</summary>
		[ImplementPropertyType("cookieBannerText")]
		public IHtmlString CookieBannerText
		{
			get { return this.GetPropertyValue<IHtmlString>("cookieBannerText"); }
		}

		///<summary>
		/// Copyright Text: [copyrightText]
		///</summary>
		[ImplementPropertyType("copyrightText")]
		public string CopyrightText
		{
			get { return this.GetPropertyValue<string>("copyrightText"); }
		}

		///<summary>
		/// Corporate Links: [corporateLinks]
		///</summary>
		[ImplementPropertyType("corporateLinks")]
		public RJP.MultiUrlPicker.Models.MultiUrls CorporateLinks
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("corporateLinks"); }
		}

		///<summary>
		/// Corporate Title: [corporateTitle]
		///</summary>
		[ImplementPropertyType("corporateTitle")]
		public string CorporateTitle
		{
			get { return this.GetPropertyValue<string>("corporateTitle"); }
		}

		///<summary>
		/// Footer Boxes: Footer 3 boxes
		///</summary>
		[ImplementPropertyType("footerBoxes")]
		public Archetype.Models.ArchetypeModel FooterBoxes
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("footerBoxes"); }
		}

		///<summary>
		/// Logo: image dimensions 184px x 82px [footerLogo]
		///</summary>
		[ImplementPropertyType("footerLogo")]
		public object FooterLogo
		{
			get { return this.GetPropertyValue("footerLogo"); }
		}

		///<summary>
		/// Footer Quick Links: [footerQuickLinks]
		///</summary>
		[ImplementPropertyType("footerQuickLinks")]
		public RJP.MultiUrlPicker.Models.MultiUrls FooterQuickLinks
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("footerQuickLinks"); }
		}

		///<summary>
		/// Image Slider: Select the folder which contain the slider images [imageSlider]
		///</summary>
		[ImplementPropertyType("imageSlider")]
		public object ImageSlider
		{
			get { return this.GetPropertyValue("imageSlider"); }
		}

		///<summary>
		/// Konsumenten Box Description
		///</summary>
		[ImplementPropertyType("konsumentenBoxDescription")]
		public IHtmlString KonsumentenBoxDescription
		{
			get { return this.GetPropertyValue<IHtmlString>("konsumentenBoxDescription"); }
		}

		///<summary>
		/// Konsumenten Box Image
		///</summary>
		[ImplementPropertyType("konsumentenBoxImage")]
		public object KonsumentenBoxImage
		{
			get { return this.GetPropertyValue("konsumentenBoxImage"); }
		}

		///<summary>
		/// Konsumenten Box Link
		///</summary>
		[ImplementPropertyType("konsumentenBoxLink")]
		public RJP.MultiUrlPicker.Models.MultiUrls KonsumentenBoxLink
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("konsumentenBoxLink"); }
		}

		///<summary>
		/// Konsumenten Box TextColor: Konsumenten Box TextColor
		///</summary>
		[ImplementPropertyType("konsumentenBoxTextColor")]
		public object KonsumentenBoxTextColor
		{
			get { return this.GetPropertyValue("konsumentenBoxTextColor"); }
		}

		///<summary>
		/// Konsumenten Box Title: This will be the tittle of the box just under the branchen tab in home page
		///</summary>
		[ImplementPropertyType("konsumentenBoxTitle")]
		public string KonsumentenBoxTitle
		{
			get { return this.GetPropertyValue<string>("konsumentenBoxTitle"); }
		}

		///<summary>
		/// Left Header Quick Links: Header Quick Links on the left side of seach icon
		///</summary>
		[ImplementPropertyType("leftHeaderQuickLinks")]
		public Archetype.Models.ArchetypeModel LeftHeaderQuickLinks
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("leftHeaderQuickLinks"); }
		}

		///<summary>
		/// Left Side Special Content Box
		///</summary>
		[ImplementPropertyType("leftSideSpecialContentBox")]
		public Archetype.Models.ArchetypeModel LeftSideSpecialContentBox
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("leftSideSpecialContentBox"); }
		}

		///<summary>
		/// Linkedin follow Link: Linkedin Follow Link on Footer
		///</summary>
		[ImplementPropertyType("linkedinFollowLink")]
		public string LinkedinFollowLink
		{
			get { return this.GetPropertyValue<string>("linkedinFollowLink"); }
		}

		///<summary>
		/// Logo: Image dimension 160px x 77px [logo]
		///</summary>
		[ImplementPropertyType("logo")]
		public object Logo
		{
			get { return this.GetPropertyValue("logo"); }
		}

		///<summary>
		/// How did you hear about us  Options: This will populated in How did you hear about us Drop down inside the forms
		///</summary>
		[ImplementPropertyType("mediaSourceOptions")]
		public Archetype.Models.ArchetypeModel MediaSourceOptions
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("mediaSourceOptions"); }
		}

		///<summary>
		/// Menu Heading: [menuHeading]
		///</summary>
		[ImplementPropertyType("menuHeading")]
		public string MenuHeading
		{
			get { return this.GetPropertyValue<string>("menuHeading"); }
		}

		///<summary>
		/// Right Header Quick Links: Header Quick Links on the right side of the seach icon
		///</summary>
		[ImplementPropertyType("rightHeaderQuickLinks")]
		public Archetype.Models.ArchetypeModel RightHeaderQuickLinks
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("rightHeaderQuickLinks"); }
		}

		///<summary>
		/// Right Side Special Content Box
		///</summary>
		[ImplementPropertyType("rightSideSpecialContentBox")]
		public Archetype.Models.ArchetypeModel RightSideSpecialContentBox
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("rightSideSpecialContentBox"); }
		}

		///<summary>
		/// Main Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// World Wide Websites: [worldWideWebsites]
		///</summary>
		[ImplementPropertyType("worldWideWebsites")]
		public Archetype.Models.ArchetypeModel WorldWideWebsites
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("worldWideWebsites"); }
		}

		///<summary>
		/// Xing Follow Link: Xing Follow Link on Footer
		///</summary>
		[ImplementPropertyType("xingFollowLink")]
		public string XingFollowLink
		{
			get { return this.GetPropertyValue<string>("xingFollowLink"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Number Of News Items: This will be the count for items to be displayed for News Boxes. By default the count will be 3
		///</summary>
		[ImplementPropertyType("noOfItemsToShowInNewsBoxes")]
		public string NoOfItemsToShowInNewsBoxes
		{
			get { return PagesWithNewsBoxes.GetNoOfItemsToShowInNewsBoxes(this); }
		}
	}

	/// <summary>Category</summary>
	[PublishedContentModel("category")]
	public partial class Category : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "category";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Category(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Category, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Industry Single</summary>
	[PublishedContentModel("industrySingle")]
	public partial class IndustrySingle : PublishedContentModel, IContentMaster
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "industrySingle";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public IndustrySingle(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<IndustrySingle, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Credit Framework Summary: creditFrameworkSummary
		///</summary>
		[ImplementPropertyType("creditFrameworkSummary")]
		public IHtmlString CreditFrameworkSummary
		{
			get { return this.GetPropertyValue<IHtmlString>("creditFrameworkSummary"); }
		}

		///<summary>
		/// Credit Framework Title: [creditFrameworkTitle]
		///</summary>
		[ImplementPropertyType("creditFrameworkTitle")]
		public string CreditFrameworkTitle
		{
			get { return this.GetPropertyValue<string>("creditFrameworkTitle"); }
		}

		///<summary>
		/// Credit Phase Default Link: Credit Phase Default Link
		///</summary>
		[ImplementPropertyType("creditPhaseDefaultLink")]
		public RJP.MultiUrlPicker.Models.MultiUrls CreditPhaseDefaultLink
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("creditPhaseDefaultLink"); }
		}

		///<summary>
		/// Credit Phase Default Text: Credit Phase Default Text
		///</summary>
		[ImplementPropertyType("creditPhaseDefaultText")]
		public IHtmlString CreditPhaseDefaultText
		{
			get { return this.GetPropertyValue<IHtmlString>("creditPhaseDefaultText"); }
		}

		///<summary>
		/// Credit Phase Default Title: Credit Phase Default Title
		///</summary>
		[ImplementPropertyType("creditPhaseDefaultTitle")]
		public string CreditPhaseDefaultTitle
		{
			get { return this.GetPropertyValue<string>("creditPhaseDefaultTitle"); }
		}

		///<summary>
		/// Home Branchen Tab Description
		///</summary>
		[ImplementPropertyType("homeBranchenTabDescription")]
		public IHtmlString HomeBranchenTabDescription
		{
			get { return this.GetPropertyValue<IHtmlString>("homeBranchenTabDescription"); }
		}

		///<summary>
		/// Home Branchen Tab Title
		///</summary>
		[ImplementPropertyType("homeBranchenTabTitle")]
		public string HomeBranchenTabTitle
		{
			get { return this.GetPropertyValue<string>("homeBranchenTabTitle"); }
		}

		///<summary>
		/// Icon: [icon]
		///</summary>
		[ImplementPropertyType("icon")]
		public object Icon
		{
			get { return this.GetPropertyValue("icon"); }
		}

		///<summary>
		/// Industry Slider
		///</summary>
		[ImplementPropertyType("industrySlider")]
		public object IndustrySlider
		{
			get { return this.GetPropertyValue("industrySlider"); }
		}

		///<summary>
		/// Short Description: [shortDescription]
		///</summary>
		[ImplementPropertyType("shortDescription")]
		public IHtmlString ShortDescription
		{
			get { return this.GetPropertyValue<IHtmlString>("shortDescription"); }
		}

		///<summary>
		/// Slider Speed: [sliderSpeed]
		///</summary>
		[ImplementPropertyType("sliderSpeed")]
		public string SliderSpeed
		{
			get { return this.GetPropertyValue<string>("sliderSpeed"); }
		}

		///<summary>
		/// Testimonials Slider: Testimonials Slider to be shown in credit success stories page
		///</summary>
		[ImplementPropertyType("testimonialsSlider")]
		public object TestimonialsSlider
		{
			get { return this.GetPropertyValue("testimonialsSlider"); }
		}

		///<summary>
		/// Three Box content
		///</summary>
		[ImplementPropertyType("threeBoxContent")]
		public Archetype.Models.ArchetypeModel ThreeBoxContent
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("threeBoxContent"); }
		}

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Products Main Home</summary>
	[PublishedContentModel("productsMainHome")]
	public partial class ProductsMainHome : PublishedContentModel, IContentMaster
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "productsMainHome";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ProductsMainHome(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ProductsMainHome, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Products Home</summary>
	[PublishedContentModel("productsHome")]
	public partial class ProductsHome : PublishedContentModel, IContentMaster, IFormsWithEmailNotification, IPages, IPagesWithBanner
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "productsHome";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ProductsHome(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ProductsHome, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Company Placeholder: [companyPlaceholder]
		///</summary>
		[ImplementPropertyType("companyPlaceholder")]
		public string CompanyPlaceholder
		{
			get { return this.GetPropertyValue<string>("companyPlaceholder"); }
		}

		///<summary>
		/// Compulsory Fields Notation Text: This will show Compulsory Fields Notation Text just above the submit button[By default :  *Compulsory Fields]
		///</summary>
		[ImplementPropertyType("CompulsoryFieldsIconText")]
		public string CompulsoryFieldsIconText
		{
			get { return this.GetPropertyValue<string>("CompulsoryFieldsIconText"); }
		}

		///<summary>
		/// Email Placeholder: [emailPlaceholder]
		///</summary>
		[ImplementPropertyType("emailPlaceholder")]
		public string EmailPlaceholder
		{
			get { return this.GetPropertyValue<string>("emailPlaceholder"); }
		}

		///<summary>
		/// First Name Placeholder: [firstNamePlaceholder]
		///</summary>
		[ImplementPropertyType("firstNamePlaceholder")]
		public string FirstNamePlaceholder
		{
			get { return this.GetPropertyValue<string>("firstNamePlaceholder"); }
		}

		///<summary>
		/// Form Instruction Text: this will appears just above the forms in each product single page
		///</summary>
		[ImplementPropertyType("formInstructionText")]
		public string FormInstructionText
		{
			get { return this.GetPropertyValue<string>("formInstructionText"); }
		}

		///<summary>
		/// Industry Placeholder: [industryPlaceholder]
		///</summary>
		[ImplementPropertyType("industryPlaceholder")]
		public string IndustryPlaceholder
		{
			get { return this.GetPropertyValue<string>("industryPlaceholder"); }
		}

		///<summary>
		/// Job Title Placeholder: [jobTitlePlaceholder]
		///</summary>
		[ImplementPropertyType("jobTitlePlaceholder")]
		public string JobTitlePlaceholder
		{
			get { return this.GetPropertyValue<string>("jobTitlePlaceholder"); }
		}

		///<summary>
		/// Last Name Placeholder: [lastNamePlaceholder]
		///</summary>
		[ImplementPropertyType("lastNamePlaceholder")]
		public string LastNamePlaceholder
		{
			get { return this.GetPropertyValue<string>("lastNamePlaceholder"); }
		}

		///<summary>
		/// Newsletter Checkbox Placeholder: [newsletterCheckboxPlaceholder]
		///</summary>
		[ImplementPropertyType("newsletterCheckboxPlaceholder")]
		public IHtmlString NewsletterCheckboxPlaceholder
		{
			get { return this.GetPropertyValue<IHtmlString>("newsletterCheckboxPlaceholder"); }
		}

		///<summary>
		/// Number Of News Items: This will be the count for items to be displayed for News Boxes in product single page. By default the count will be 1
		///</summary>
		[ImplementPropertyType("noOfItemsToShowInNewsBoxes")]
		public string NoOfItemsToShowInNewsBoxes
		{
			get { return this.GetPropertyValue<string>("noOfItemsToShowInNewsBoxes"); }
		}

		///<summary>
		/// Phone Number Placeholder: [phoneNumberPlaceholder]
		///</summary>
		[ImplementPropertyType("phoneNumberPlaceholder")]
		public string PhoneNumberPlaceholder
		{
			get { return this.GetPropertyValue<string>("phoneNumberPlaceholder"); }
		}

		///<summary>
		/// Privacy Checkbox Placeholder: [privacyCheckboxPlaceholder]
		///</summary>
		[ImplementPropertyType("privacyCheckboxPlaceholder")]
		public IHtmlString PrivacyCheckboxPlaceholder
		{
			get { return this.GetPropertyValue<IHtmlString>("privacyCheckboxPlaceholder"); }
		}

		///<summary>
		/// Privacy Text: [privacyText]
		///</summary>
		[ImplementPropertyType("privacyText")]
		public IHtmlString PrivacyText
		{
			get { return this.GetPropertyValue<IHtmlString>("privacyText"); }
		}

		///<summary>
		/// Privacy Text Title: [privacyTextTitle]
		///</summary>
		[ImplementPropertyType("privacyTextTitle")]
		public string PrivacyTextTitle
		{
			get { return this.GetPropertyValue<string>("privacyTextTitle"); }
		}

		///<summary>
		/// Submit Button Text: submitButtonText
		///</summary>
		[ImplementPropertyType("submitButtonText")]
		public string SubmitButtonText
		{
			get { return this.GetPropertyValue<string>("submitButtonText"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// BCC recipient(s): [bCCRecipients] Comma separated email ids.
		///</summary>
		[ImplementPropertyType("bCCRecipients")]
		public string BCcrecipients
		{
			get { return FormsWithEmailNotification.GetBCcrecipients(this); }
		}

		///<summary>
		/// Body content: [emailReplyBody] Place holders from the form                                                                           [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE],[MESSAGE]
		///</summary>
		[ImplementPropertyType("bodyContent")]
		public IHtmlString BodyContent
		{
			get { return FormsWithEmailNotification.GetBodyContent(this); }
		}

		///<summary>
		/// E-Mail subject: [eMailSubject]You can use the following placeholders in the email subject.[DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE]
		///</summary>
		[ImplementPropertyType("eMailSubject")]
		public string EMailSubject
		{
			get { return FormsWithEmailNotification.GetEMailSubject(this); }
		}

		///<summary>
		/// From Email: From email id[fromEmail]
		///</summary>
		[ImplementPropertyType("fromEmail")]
		public string FromEmail
		{
			get { return FormsWithEmailNotification.GetFromEmail(this); }
		}

		///<summary>
		/// E-mail Body: [notificationBody] You can use the following placeholders in the email subject. [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE]
		///</summary>
		[ImplementPropertyType("notificationBody")]
		public IHtmlString NotificationBody
		{
			get { return FormsWithEmailNotification.GetNotificationBody(this); }
		}

		///<summary>
		/// Reply email subject: [replyEmailSubject]Place holders from the form [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE],[MESSAGE]
		///</summary>
		[ImplementPropertyType("replyEmailSubject")]
		public string ReplyEmailSubject
		{
			get { return FormsWithEmailNotification.GetReplyEmailSubject(this); }
		}

		///<summary>
		/// Reply to user: [replyToUser] Select this option to enable auto reply to the user.
		///</summary>
		[ImplementPropertyType("replyToUser")]
		public bool ReplyToUser
		{
			get { return FormsWithEmailNotification.GetReplyToUser(this); }
		}

		///<summary>
		/// Send notification To: [sendNotificationTo] Comma separated email ids of administrators.
		///</summary>
		[ImplementPropertyType("sendNotificationTo")]
		public string SendNotificationTo
		{
			get { return FormsWithEmailNotification.GetSendNotificationTo(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}

		///<summary>
		/// Background Image: Select the background image for the section. Image size: 1600 X 500 px
		///</summary>
		[ImplementPropertyType("backgroundImage")]
		public object BackgroundImage
		{
			get { return PagesWithBanner.GetBackgroundImage(this); }
		}

		///<summary>
		/// Banner description
		///</summary>
		[ImplementPropertyType("bannerDescription")]
		public IHtmlString BannerDescription
		{
			get { return PagesWithBanner.GetBannerDescription(this); }
		}

		///<summary>
		/// Banner Text Color: style for the text's color over the image(default:white)
		///</summary>
		[ImplementPropertyType("bannerTextColor")]
		public object BannerTextColor
		{
			get { return PagesWithBanner.GetBannerTextColor(this); }
		}

		///<summary>
		/// Banner Title
		///</summary>
		[ImplementPropertyType("bannerTitle")]
		public string BannerTitle
		{
			get { return PagesWithBanner.GetBannerTitle(this); }
		}

		///<summary>
		/// Mobile Background Image: This image will show as the background image for mobile devices. Image dimension 1099px X 548px [mobileBackgroundImage]
		///</summary>
		[ImplementPropertyType("mobileBackgroundImage")]
		public object MobileBackgroundImage
		{
			get { return PagesWithBanner.GetMobileBackgroundImage(this); }
		}
	}

	/// <summary>Products Single Page</summary>
	[PublishedContentModel("productsSinglePage")]
	public partial class ProductsSinglePage : PublishedContentModel, IContentMaster, IPages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "productsSinglePage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ProductsSinglePage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ProductsSinglePage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Body Text
		///</summary>
		[ImplementPropertyType("bodyText")]
		public IHtmlString BodyText
		{
			get { return this.GetPropertyValue<IHtmlString>("bodyText"); }
		}

		///<summary>
		/// Framework Phase Tags
		///</summary>
		[ImplementPropertyType("frameworkPhaseTags")]
		public string FrameworkPhaseTags
		{
			get { return this.GetPropertyValue<string>("frameworkPhaseTags"); }
		}

		///<summary>
		/// Hide Contact Us Link: This will hide the Right Side Contact Us Link
		///</summary>
		[ImplementPropertyType("hideContactUsLink")]
		public bool HideContactUsLink
		{
			get { return this.GetPropertyValue<bool>("hideContactUsLink"); }
		}

		///<summary>
		/// Hide Schedule Consultation Link: This will hide the right side Schedule Consultation Link
		///</summary>
		[ImplementPropertyType("hideScheduleConsultationLink")]
		public bool HideScheduleConsultationLink
		{
			get { return this.GetPropertyValue<bool>("hideScheduleConsultationLink"); }
		}

		///<summary>
		/// Industry Tags
		///</summary>
		[ImplementPropertyType("industryTags")]
		public string IndustryTags
		{
			get { return this.GetPropertyValue<string>("industryTags"); }
		}

		///<summary>
		/// Intro Text
		///</summary>
		[ImplementPropertyType("introText")]
		public IHtmlString IntroText
		{
			get { return this.GetPropertyValue<IHtmlString>("introText"); }
		}

		///<summary>
		/// Abstarct Text
		///</summary>
		[ImplementPropertyType("productAbstract")]
		public IHtmlString ProductAbstract
		{
			get { return this.GetPropertyValue<IHtmlString>("productAbstract"); }
		}

		///<summary>
		/// Icon
		///</summary>
		[ImplementPropertyType("productIcon")]
		public object ProductIcon
		{
			get { return this.GetPropertyValue("productIcon"); }
		}

		///<summary>
		/// Main Image
		///</summary>
		[ImplementPropertyType("productMainImage")]
		public object ProductMainImage
		{
			get { return this.GetPropertyValue("productMainImage"); }
		}

		///<summary>
		/// Side Image
		///</summary>
		[ImplementPropertyType("productSideImage")]
		public object ProductSideImage
		{
			get { return this.GetPropertyValue("productSideImage"); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("productTitle")]
		public string ProductTitle
		{
			get { return this.GetPropertyValue<string>("productTitle"); }
		}

		///<summary>
		/// Product Type
		///</summary>
		[ImplementPropertyType("productType")]
		public string ProductType
		{
			get { return this.GetPropertyValue<string>("productType"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}
	}

	/// <summary>News and Events Main Home</summary>
	[PublishedContentModel("NewsAndEventsMainHome")]
	public partial class NewsAndEventsMainHome : PublishedContentModel, IContentMaster, IPages, IPagesWithBanner
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "NewsAndEventsMainHome";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public NewsAndEventsMainHome(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NewsAndEventsMainHome, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Highlighted Items: Select the Items to show in in the highlighted section
		///</summary>
		[ImplementPropertyType("highlightedNews")]
		public string HighlightedNews
		{
			get { return this.GetPropertyValue<string>("highlightedNews"); }
		}

		///<summary>
		/// No items Found message: Message to display if there is no item
		///</summary>
		[ImplementPropertyType("noItemsFoundMessage")]
		public string NoItemsFoundMessage
		{
			get { return this.GetPropertyValue<string>("noItemsFoundMessage"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}

		///<summary>
		/// Background Image: Select the background image for the section. Image size: 1600 X 500 px
		///</summary>
		[ImplementPropertyType("backgroundImage")]
		public object BackgroundImage
		{
			get { return PagesWithBanner.GetBackgroundImage(this); }
		}

		///<summary>
		/// Banner description
		///</summary>
		[ImplementPropertyType("bannerDescription")]
		public IHtmlString BannerDescription
		{
			get { return PagesWithBanner.GetBannerDescription(this); }
		}

		///<summary>
		/// Banner Text Color: style for the text's color over the image(default:white)
		///</summary>
		[ImplementPropertyType("bannerTextColor")]
		public object BannerTextColor
		{
			get { return PagesWithBanner.GetBannerTextColor(this); }
		}

		///<summary>
		/// Banner Title
		///</summary>
		[ImplementPropertyType("bannerTitle")]
		public string BannerTitle
		{
			get { return PagesWithBanner.GetBannerTitle(this); }
		}

		///<summary>
		/// Mobile Background Image: This image will show as the background image for mobile devices. Image dimension 1099px X 548px [mobileBackgroundImage]
		///</summary>
		[ImplementPropertyType("mobileBackgroundImage")]
		public object MobileBackgroundImage
		{
			get { return PagesWithBanner.GetMobileBackgroundImage(this); }
		}
	}

	/// <summary>PR And Events Home</summary>
	[PublishedContentModel("PRAndEventsHome")]
	public partial class PrandEventsHome : PublishedContentModel, IContentMaster
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "PRAndEventsHome";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PrandEventsHome(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PrandEventsHome, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>News Single</summary>
	[PublishedContentModel("newsSingle")]
	public partial class NewsSingle : PublishedContentModel, IContentMaster, INewsEventsCommon
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "newsSingle";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public NewsSingle(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NewsSingle, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Actual date: will be displayed in frontend as date of the news/event
		///</summary>
		[ImplementPropertyType("actualDate")]
		public DateTime ActualDate
		{
			get { return this.GetPropertyValue<DateTime>("actualDate"); }
		}

		///<summary>
		/// Body Text: [bodyText]
		///</summary>
		[ImplementPropertyType("bodyText")]
		public IHtmlString BodyText
		{
			get { return this.GetPropertyValue<IHtmlString>("bodyText"); }
		}

		///<summary>
		/// Custom CTA: customizable CTA on right side
		///</summary>
		[ImplementPropertyType("customCTA")]
		public RJP.MultiUrlPicker.Models.MultiUrls CustomCta
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("customCTA"); }
		}

		///<summary>
		/// Hide Contact Us Link: This will hide the Right Side Contact Us Link
		///</summary>
		[ImplementPropertyType("hideContactUsLink")]
		public bool HideContactUsLink
		{
			get { return this.GetPropertyValue<bool>("hideContactUsLink"); }
		}

		///<summary>
		/// Hide from News Boxes: This will hide the page from  News boxes in home page,Über uns etc
		///</summary>
		[ImplementPropertyType("hideFromNewsBoxes")]
		public bool HideFromNewsBoxes
		{
			get { return this.GetPropertyValue<bool>("hideFromNewsBoxes"); }
		}

		///<summary>
		/// Hide Schedule Consultation Link: This will hide the right side Schedule Consultation Link
		///</summary>
		[ImplementPropertyType("hideScheduleConsultationLink")]
		public bool HideScheduleConsultationLink
		{
			get { return this.GetPropertyValue<bool>("hideScheduleConsultationLink"); }
		}

		///<summary>
		/// Industry Tags: This will be used to link a news to a specific Industry
		///</summary>
		[ImplementPropertyType("industryTags")]
		public string IndustryTags
		{
			get { return this.GetPropertyValue<string>("industryTags"); }
		}

		///<summary>
		/// Publication Date: will be used to sort  the news/event post
		///</summary>
		[ImplementPropertyType("publicationDate")]
		public DateTime PublicationDate
		{
			get { return this.GetPropertyValue<DateTime>("publicationDate"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Short Descripion: [shortDescripion]
		///</summary>
		[ImplementPropertyType("shortDescripion")]
		public IHtmlString ShortDescripion
		{
			get { return NewsEventsCommon.GetShortDescripion(this); }
		}

		///<summary>
		/// Thumbnail Image: This image will show along with the short description in other pages if needed . Image dimensions 266px x 180px [thumbnailImage]
		///</summary>
		[ImplementPropertyType("thumbnailImage")]
		public object ThumbnailImage
		{
			get { return NewsEventsCommon.GetThumbnailImage(this); }
		}

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return NewsEventsCommon.GetTitle(this); }
		}
	}

	/// <summary>Banner with Center Text and Background Image</summary>
	[PublishedContentModel("bannerWithBackgroundImage")]
	public partial class BannerWithBackgroundImage : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "bannerWithBackgroundImage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public BannerWithBackgroundImage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BannerWithBackgroundImage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Background Image: This image will shows as the background image . Image dimension 1160 px x 350 px [backgroundImage]
		///</summary>
		[ImplementPropertyType("backgroundImage")]
		public object BackgroundImage
		{
			get { return this.GetPropertyValue("backgroundImage"); }
		}

		///<summary>
		/// Link: [link]
		///</summary>
		[ImplementPropertyType("link")]
		public RJP.MultiUrlPicker.Models.MultiUrls Link
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("link"); }
		}

		///<summary>
		/// Mobile Background Image: This image will show as the bacground image for mobile devices. Image dimension 640px x  803px [mobileBackgroundImage]
		///</summary>
		[ImplementPropertyType("mobileBackgroundImage")]
		public object MobileBackgroundImage
		{
			get { return this.GetPropertyValue("mobileBackgroundImage"); }
		}

		///<summary>
		/// Short Description: [shortDescription]
		///</summary>
		[ImplementPropertyType("shortDescription")]
		public string ShortDescription
		{
			get { return this.GetPropertyValue<string>("shortDescription"); }
		}

		///<summary>
		/// Text color: this will be the color for the text over the image
		///</summary>
		[ImplementPropertyType("textColor")]
		public object TextColor
		{
			get { return this.GetPropertyValue("textColor"); }
		}

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}
	}

	/// <summary>Banner with Extending Image</summary>
	[PublishedContentModel("bannerWithExtendingImage")]
	public partial class BannerWithExtendingImage : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "bannerWithExtendingImage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public BannerWithExtendingImage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BannerWithExtendingImage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Banner Description: [bannerDescription]
		///</summary>
		[ImplementPropertyType("bannerDescription")]
		public string BannerDescription
		{
			get { return this.GetPropertyValue<string>("bannerDescription"); }
		}

		///<summary>
		/// Image: Image size : 786X400 [bannerSideimage]
		///</summary>
		[ImplementPropertyType("bannerSideimage")]
		public object BannerSideimage
		{
			get { return this.GetPropertyValue("bannerSideimage"); }
		}

		///<summary>
		/// Banner Title: [bannerTitle]
		///</summary>
		[ImplementPropertyType("bannerTitle")]
		public string BannerTitle
		{
			get { return this.GetPropertyValue<string>("bannerTitle"); }
		}

		///<summary>
		/// Image Right Align: If the image need to be aligned in the right side. [imageRightAlign]
		///</summary>
		[ImplementPropertyType("imageRightAlign")]
		public bool ImageRightAlign
		{
			get { return this.GetPropertyValue<bool>("imageRightAlign"); }
		}

		///<summary>
		/// Link To: [linkTo]
		///</summary>
		[ImplementPropertyType("linkTo")]
		public RJP.MultiUrlPicker.Models.MultiUrls LinkTo
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("linkTo"); }
		}
	}

	/// <summary>News Listing Boxes</summary>
	[PublishedContentModel("homeNewsListing")]
	public partial class HomeNewsListing : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "homeNewsListing";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public HomeNewsListing(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<HomeNewsListing, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// News Items: Select node to be shown in the listing [newsItems]
		///</summary>
		[ImplementPropertyType("newsItems")]
		public string NewsItems
		{
			get { return this.GetPropertyValue<string>("newsItems"); }
		}

		///<summary>
		/// No of Items To show: This will be the count for items to be displayed for News, Event and Press release. By default the count will be 3 [noOfItemsToShow]
		///</summary>
		[ImplementPropertyType("noOfItemsToShow")]
		public string NoOfItemsToShow
		{
			get { return this.GetPropertyValue<string>("noOfItemsToShow"); }
		}
	}

	/// <summary>Three Column Link to Pages</summary>
	[PublishedContentModel("threeColumnContent")]
	public partial class ThreeColumnContent : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "threeColumnContent";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ThreeColumnContent(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ThreeColumnContent, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Link To Pages: [linkToPages]
		///</summary>
		[ImplementPropertyType("linkToPages")]
		public Archetype.Models.ArchetypeModel LinkToPages
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("linkToPages"); }
		}
	}

	/// <summary>About Us</summary>
	[PublishedContentModel("aboutUs")]
	public partial class AboutUs : PublishedContentModel, IContentMaster, IPages, IPagesWithNewsBoxes
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "aboutUs";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AboutUs(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AboutUs, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Background Image: Select the background image for the section. Image size: 1600 X 500 px
		///</summary>
		[ImplementPropertyType("backgroundImage")]
		public object BackgroundImage
		{
			get { return this.GetPropertyValue("backgroundImage"); }
		}

		///<summary>
		/// Banner description
		///</summary>
		[ImplementPropertyType("bannerDescription")]
		public IHtmlString BannerDescription
		{
			get { return this.GetPropertyValue<IHtmlString>("bannerDescription"); }
		}

		///<summary>
		/// Banner Text Color: style for the text's color over the image(default:white)
		///</summary>
		[ImplementPropertyType("bannerTextColor")]
		public object BannerTextColor
		{
			get { return this.GetPropertyValue("bannerTextColor"); }
		}

		///<summary>
		/// Banner Title
		///</summary>
		[ImplementPropertyType("bannerTitle")]
		public string BannerTitle
		{
			get { return this.GetPropertyValue<string>("bannerTitle"); }
		}

		///<summary>
		/// Body content
		///</summary>
		[ImplementPropertyType("bodyContent")]
		public Newtonsoft.Json.Linq.JToken BodyContent
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("bodyContent"); }
		}

		///<summary>
		/// Mobile Background Image: This image will show as the bacground image for mobile devices. Image dimension 1099px X 548px
		///</summary>
		[ImplementPropertyType("mobileBackgroundImage")]
		public object MobileBackgroundImage
		{
			get { return this.GetPropertyValue("mobileBackgroundImage"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}

		///<summary>
		/// Number Of News Items: This will be the count for items to be displayed for News Boxes. By default the count will be 3
		///</summary>
		[ImplementPropertyType("noOfItemsToShowInNewsBoxes")]
		public string NoOfItemsToShowInNewsBoxes
		{
			get { return PagesWithNewsBoxes.GetNoOfItemsToShowInNewsBoxes(this); }
		}
	}

	/// <summary>Standard Page With Side Menu</summary>
	[PublishedContentModel("standardPageWithSideMenu")]
	public partial class StandardPageWithSideMenu : PublishedContentModel, IContentMaster, IPages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "standardPageWithSideMenu";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public StandardPageWithSideMenu(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<StandardPageWithSideMenu, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Body Content
		///</summary>
		[ImplementPropertyType("bodyContent")]
		public IHtmlString BodyContent
		{
			get { return this.GetPropertyValue<IHtmlString>("bodyContent"); }
		}

		///<summary>
		/// Introduction text
		///</summary>
		[ImplementPropertyType("introductionText")]
		public IHtmlString IntroductionText
		{
			get { return this.GetPropertyValue<IHtmlString>("introductionText"); }
		}

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}
	}

	/// <summary>Standrard Page content</summary>
	[PublishedContentModel("standrardPageContent")]
	public partial class StandrardPageContent : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "standrardPageContent";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public StandrardPageContent(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<StandrardPageContent, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Introduction Text: [introductionText]
		///</summary>
		[ImplementPropertyType("introductionText")]
		public IHtmlString IntroductionText
		{
			get { return this.GetPropertyValue<IHtmlString>("introductionText"); }
		}

		///<summary>
		/// Main Text
		///</summary>
		[ImplementPropertyType("mainText")]
		public IHtmlString MainText
		{
			get { return this.GetPropertyValue<IHtmlString>("mainText"); }
		}
	}

	// Mixin content Type 1138 with alias "pages"
	/// <summary>Pages</summary>
	public partial interface IPages : IPublishedContent
	{
		/// <summary>Breadcrumb Color</summary>
		object BreadcrumbColor { get; }
	}

	/// <summary>Pages</summary>
	[PublishedContentModel("pages")]
	public partial class Pages : PublishedContentModel, IPages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pages";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Pages(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Pages, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return GetBreadcrumbColor(this); }
		}

		/// <summary>Static getter for Breadcrumb Color</summary>
		public static object GetBreadcrumbColor(IPages that) { return that.GetPropertyValue("breadcrumbColor"); }
	}

	/// <summary>[uDateFoldersy]</summary>
	[PublishedContentModel("uDateFoldersy")]
	public partial class UDateFoldersy : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "uDateFoldersy";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public UDateFoldersy(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<UDateFoldersy, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>[uDateFoldersy] Day Folder</summary>
	[PublishedContentModel("uDateFoldersyFolderDay")]
	public partial class UDateFoldersyFolderDay : UDateFoldersy
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "uDateFoldersyFolderDay";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public UDateFoldersyFolderDay(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<UDateFoldersyFolderDay, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>[uDateFoldersy] Month Folder</summary>
	[PublishedContentModel("uDateFoldersyFolderMonth")]
	public partial class UDateFoldersyFolderMonth : UDateFoldersy
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "uDateFoldersyFolderMonth";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public UDateFoldersyFolderMonth(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<UDateFoldersyFolderMonth, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>[uDateFoldersy] Year Folder</summary>
	[PublishedContentModel("uDateFoldersyFolderYear")]
	public partial class UDateFoldersyFolderYear : UDateFoldersy
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "uDateFoldersyFolderYear";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public UDateFoldersyFolderYear(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<UDateFoldersyFolderYear, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	// Mixin content Type 1152 with alias "newsEventsCommon"
	/// <summary>News  Event Common</summary>
	public partial interface INewsEventsCommon : IPublishedContent
	{
		/// <summary>Short Descripion</summary>
		IHtmlString ShortDescripion { get; }

		/// <summary>Thumbnail Image</summary>
		object ThumbnailImage { get; }

		/// <summary>Title</summary>
		string Title { get; }
	}

	/// <summary>News  Event Common</summary>
	[PublishedContentModel("newsEventsCommon")]
	public partial class NewsEventsCommon : PublishedContentModel, INewsEventsCommon
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "newsEventsCommon";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public NewsEventsCommon(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NewsEventsCommon, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Short Descripion: [shortDescripion]
		///</summary>
		[ImplementPropertyType("shortDescripion")]
		public IHtmlString ShortDescripion
		{
			get { return GetShortDescripion(this); }
		}

		/// <summary>Static getter for Short Descripion</summary>
		public static IHtmlString GetShortDescripion(INewsEventsCommon that) { return that.GetPropertyValue<IHtmlString>("shortDescripion"); }

		///<summary>
		/// Thumbnail Image: This image will show along with the short description in other pages if needed . Image dimensions 266px x 180px [thumbnailImage]
		///</summary>
		[ImplementPropertyType("thumbnailImage")]
		public object ThumbnailImage
		{
			get { return GetThumbnailImage(this); }
		}

		/// <summary>Static getter for Thumbnail Image</summary>
		public static object GetThumbnailImage(INewsEventsCommon that) { return that.GetPropertyValue("thumbnailImage"); }

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return GetTitle(this); }
		}

		/// <summary>Static getter for Title</summary>
		public static string GetTitle(INewsEventsCommon that) { return that.GetPropertyValue<string>("title"); }
	}

	// Mixin content Type 1153 with alias "pagesWithBanner"
	/// <summary>Pages With Banner</summary>
	public partial interface IPagesWithBanner : IPublishedContent
	{
		/// <summary>Background Image</summary>
		object BackgroundImage { get; }

		/// <summary>Banner description</summary>
		IHtmlString BannerDescription { get; }

		/// <summary>Banner Text Color</summary>
		object BannerTextColor { get; }

		/// <summary>Banner Title</summary>
		string BannerTitle { get; }

		/// <summary>Mobile Background Image</summary>
		object MobileBackgroundImage { get; }
	}

	/// <summary>Pages With Banner</summary>
	[PublishedContentModel("pagesWithBanner")]
	public partial class PagesWithBanner : PublishedContentModel, IPagesWithBanner
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pagesWithBanner";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PagesWithBanner(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PagesWithBanner, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Background Image: Select the background image for the section. Image size: 1600 X 500 px
		///</summary>
		[ImplementPropertyType("backgroundImage")]
		public object BackgroundImage
		{
			get { return GetBackgroundImage(this); }
		}

		/// <summary>Static getter for Background Image</summary>
		public static object GetBackgroundImage(IPagesWithBanner that) { return that.GetPropertyValue("backgroundImage"); }

		///<summary>
		/// Banner description
		///</summary>
		[ImplementPropertyType("bannerDescription")]
		public IHtmlString BannerDescription
		{
			get { return GetBannerDescription(this); }
		}

		/// <summary>Static getter for Banner description</summary>
		public static IHtmlString GetBannerDescription(IPagesWithBanner that) { return that.GetPropertyValue<IHtmlString>("bannerDescription"); }

		///<summary>
		/// Banner Text Color: style for the text's color over the image(default:white)
		///</summary>
		[ImplementPropertyType("bannerTextColor")]
		public object BannerTextColor
		{
			get { return GetBannerTextColor(this); }
		}

		/// <summary>Static getter for Banner Text Color</summary>
		public static object GetBannerTextColor(IPagesWithBanner that) { return that.GetPropertyValue("bannerTextColor"); }

		///<summary>
		/// Banner Title
		///</summary>
		[ImplementPropertyType("bannerTitle")]
		public string BannerTitle
		{
			get { return GetBannerTitle(this); }
		}

		/// <summary>Static getter for Banner Title</summary>
		public static string GetBannerTitle(IPagesWithBanner that) { return that.GetPropertyValue<string>("bannerTitle"); }

		///<summary>
		/// Mobile Background Image: This image will show as the background image for mobile devices. Image dimension 1099px X 548px [mobileBackgroundImage]
		///</summary>
		[ImplementPropertyType("mobileBackgroundImage")]
		public object MobileBackgroundImage
		{
			get { return GetMobileBackgroundImage(this); }
		}

		/// <summary>Static getter for Mobile Background Image</summary>
		public static object GetMobileBackgroundImage(IPagesWithBanner that) { return that.GetPropertyValue("mobileBackgroundImage"); }
	}

	/// <summary>Contact Us</summary>
	[PublishedContentModel("contactUs")]
	public partial class ContactUs : PublishedContentModel, IContentMaster, IFormsWithEmailNotification, IPages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactUs";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactUs(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactUs, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Best Way To Reach Options: This will populated in Best Way To Reach Drop down inside the forms
		///</summary>
		[ImplementPropertyType("bestWayToReachOptions")]
		public Archetype.Models.ArchetypeModel BestWayToReachOptions
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("bestWayToReachOptions"); }
		}

		///<summary>
		/// Best Way To Reach Placeholder: [bestWayToReachPlaceholder]
		///</summary>
		[ImplementPropertyType("bestWayToReachPlaceholder")]
		public string BestWayToReachPlaceholder
		{
			get { return this.GetPropertyValue<string>("bestWayToReachPlaceholder"); }
		}

		///<summary>
		/// Company Placeholder: [companyPlaceholder]
		///</summary>
		[ImplementPropertyType("companyPlaceholder")]
		public string CompanyPlaceholder
		{
			get { return this.GetPropertyValue<string>("companyPlaceholder"); }
		}

		///<summary>
		/// Compulsory Fields Notation Text: This will show Compulsory Fields Notation Text just above the submit button[By default :  *Compulsory Fields]
		///</summary>
		[ImplementPropertyType("CompulsoryFieldsIconText")]
		public string CompulsoryFieldsIconText
		{
			get { return this.GetPropertyValue<string>("CompulsoryFieldsIconText"); }
		}

		///<summary>
		/// Email Placeholder: [emailPlaceholder]
		///</summary>
		[ImplementPropertyType("emailPlaceholder")]
		public string EmailPlaceholder
		{
			get { return this.GetPropertyValue<string>("emailPlaceholder"); }
		}

		///<summary>
		/// First Name Placeholder: [firstNamePlaceholder]
		///</summary>
		[ImplementPropertyType("firstNamePlaceholder")]
		public string FirstNamePlaceholder
		{
			get { return this.GetPropertyValue<string>("firstNamePlaceholder"); }
		}

		///<summary>
		/// Industry Placeholder: [industryPlaceholder]
		///</summary>
		[ImplementPropertyType("industryPlaceholder")]
		public string IndustryPlaceholder
		{
			get { return this.GetPropertyValue<string>("industryPlaceholder"); }
		}

		///<summary>
		/// Job Title Placeholder: [jobTitlePlaceholder]
		///</summary>
		[ImplementPropertyType("jobTitlePlaceholder")]
		public string JobTitlePlaceholder
		{
			get { return this.GetPropertyValue<string>("jobTitlePlaceholder"); }
		}

		///<summary>
		/// Last Name Placeholder: [lastNamePlaceholder]
		///</summary>
		[ImplementPropertyType("lastNamePlaceholder")]
		public string LastNamePlaceholder
		{
			get { return this.GetPropertyValue<string>("lastNamePlaceholder"); }
		}

		///<summary>
		/// Message Placeholder: [messagePlaceholder]
		///</summary>
		[ImplementPropertyType("messagePlaceholder")]
		public string MessagePlaceholder
		{
			get { return this.GetPropertyValue<string>("messagePlaceholder"); }
		}

		///<summary>
		/// Newsletter Checkbox Placeholder: [newsletterCheckboxPlaceholder]
		///</summary>
		[ImplementPropertyType("newsletterCheckboxPlaceholder")]
		public IHtmlString NewsletterCheckboxPlaceholder
		{
			get { return this.GetPropertyValue<IHtmlString>("newsletterCheckboxPlaceholder"); }
		}

		///<summary>
		/// News Single CTA Label: This will show as the text for the CTA links on the right side of news single,product single ,success single pages
		///</summary>
		[ImplementPropertyType("newsSingleCTALabel")]
		public string NewsSingleCtalabel
		{
			get { return this.GetPropertyValue<string>("newsSingleCTALabel"); }
		}

		///<summary>
		/// Telephone Number Placeholder: [phoneNumberPlaceholder]
		///</summary>
		[ImplementPropertyType("phoneNumberPlaceholder")]
		public string PhoneNumberPlaceholder
		{
			get { return this.GetPropertyValue<string>("phoneNumberPlaceholder"); }
		}

		///<summary>
		/// Privacy Checkbox Placeholder: [privacyCheckboxPlaceholder]
		///</summary>
		[ImplementPropertyType("privacyCheckboxPlaceholder")]
		public IHtmlString PrivacyCheckboxPlaceholder
		{
			get { return this.GetPropertyValue<IHtmlString>("privacyCheckboxPlaceholder"); }
		}

		///<summary>
		/// Privacy Text: [privacyText]
		///</summary>
		[ImplementPropertyType("privacyText")]
		public IHtmlString PrivacyText
		{
			get { return this.GetPropertyValue<IHtmlString>("privacyText"); }
		}

		///<summary>
		/// Privacy Text Title: [privacyTextTitle]
		///</summary>
		[ImplementPropertyType("privacyTextTitle")]
		public string PrivacyTextTitle
		{
			get { return this.GetPropertyValue<string>("privacyTextTitle"); }
		}

		///<summary>
		/// Select Thank You page: Select Thank You page
		///</summary>
		[ImplementPropertyType("redirectForThankYouPage")]
		public RJP.MultiUrlPicker.Models.MultiUrls RedirectForThankYouPage
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("redirectForThankYouPage"); }
		}

		///<summary>
		/// Submit Button Text: [submitButtonText]
		///</summary>
		[ImplementPropertyType("submitButtonText")]
		public string SubmitButtonText
		{
			get { return this.GetPropertyValue<string>("submitButtonText"); }
		}

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// BCC recipient(s): [bCCRecipients] Comma separated email ids.
		///</summary>
		[ImplementPropertyType("bCCRecipients")]
		public string BCcrecipients
		{
			get { return FormsWithEmailNotification.GetBCcrecipients(this); }
		}

		///<summary>
		/// Body content: [emailReplyBody] Place holders from the form                                                                           [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE],[MESSAGE]
		///</summary>
		[ImplementPropertyType("bodyContent")]
		public IHtmlString BodyContent
		{
			get { return FormsWithEmailNotification.GetBodyContent(this); }
		}

		///<summary>
		/// E-Mail subject: [eMailSubject]You can use the following placeholders in the email subject.[DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE]
		///</summary>
		[ImplementPropertyType("eMailSubject")]
		public string EMailSubject
		{
			get { return FormsWithEmailNotification.GetEMailSubject(this); }
		}

		///<summary>
		/// From Email: From email id[fromEmail]
		///</summary>
		[ImplementPropertyType("fromEmail")]
		public string FromEmail
		{
			get { return FormsWithEmailNotification.GetFromEmail(this); }
		}

		///<summary>
		/// E-mail Body: [notificationBody] You can use the following placeholders in the email subject. [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE]
		///</summary>
		[ImplementPropertyType("notificationBody")]
		public IHtmlString NotificationBody
		{
			get { return FormsWithEmailNotification.GetNotificationBody(this); }
		}

		///<summary>
		/// Reply email subject: [replyEmailSubject]Place holders from the form [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE],[MESSAGE]
		///</summary>
		[ImplementPropertyType("replyEmailSubject")]
		public string ReplyEmailSubject
		{
			get { return FormsWithEmailNotification.GetReplyEmailSubject(this); }
		}

		///<summary>
		/// Reply to user: [replyToUser] Select this option to enable auto reply to the user.
		///</summary>
		[ImplementPropertyType("replyToUser")]
		public bool ReplyToUser
		{
			get { return FormsWithEmailNotification.GetReplyToUser(this); }
		}

		///<summary>
		/// Send notification To: [sendNotificationTo] Comma separated email ids of administrators.
		///</summary>
		[ImplementPropertyType("sendNotificationTo")]
		public string SendNotificationTo
		{
			get { return FormsWithEmailNotification.GetSendNotificationTo(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}
	}

	/// <summary>Newsletter</summary>
	[PublishedContentModel("newsletter")]
	public partial class Newsletter : PublishedContentModel, IContentMaster, IFormsWithEmailNotification
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "newsletter";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Newsletter(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Newsletter, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Company Placeholder: [companyPlaceholder]
		///</summary>
		[ImplementPropertyType("companyPlaceholder")]
		public string CompanyPlaceholder
		{
			get { return this.GetPropertyValue<string>("companyPlaceholder"); }
		}

		///<summary>
		/// Compulsory Fields Notation Text: This will show Compulsory Fields Notation Text just above the submit button[By default :  *Compulsory Fields]
		///</summary>
		[ImplementPropertyType("compulsoryFieldsNotationText")]
		public string CompulsoryFieldsNotationText
		{
			get { return this.GetPropertyValue<string>("compulsoryFieldsNotationText"); }
		}

		///<summary>
		/// Email Placeholder: [emailPlaceholder]
		///</summary>
		[ImplementPropertyType("emailPlaceholder")]
		public string EmailPlaceholder
		{
			get { return this.GetPropertyValue<string>("emailPlaceholder"); }
		}

		///<summary>
		/// First Name Placeholder: [[firstNamePlaceholder]]
		///</summary>
		[ImplementPropertyType("firstNamePlaceholder")]
		public string FirstNamePlaceholder
		{
			get { return this.GetPropertyValue<string>("firstNamePlaceholder"); }
		}

		///<summary>
		/// Industry Placeholder: [industryPlaceholder]
		///</summary>
		[ImplementPropertyType("industryPlaceholder")]
		public string IndustryPlaceholder
		{
			get { return this.GetPropertyValue<string>("industryPlaceholder"); }
		}

		///<summary>
		/// Job Title Placeholder: [jobTitlePlaceholder]
		///</summary>
		[ImplementPropertyType("jobTitlePlaceholder")]
		public string JobTitlePlaceholder
		{
			get { return this.GetPropertyValue<string>("jobTitlePlaceholder"); }
		}

		///<summary>
		/// Last Name Placeholder: [lastNamePlaceholder]
		///</summary>
		[ImplementPropertyType("lastNamePlaceholder")]
		public string LastNamePlaceholder
		{
			get { return this.GetPropertyValue<string>("lastNamePlaceholder"); }
		}

		///<summary>
		/// Newsletter Checkbox Placeholder: [newsletterCheckboxPlaceholder]
		///</summary>
		[ImplementPropertyType("newsletterCheckboxPlaceholder")]
		public IHtmlString NewsletterCheckboxPlaceholder
		{
			get { return this.GetPropertyValue<IHtmlString>("newsletterCheckboxPlaceholder"); }
		}

		///<summary>
		/// Privacy Checkbox Placeholder: [privacyCheckboxPlaceholder]
		///</summary>
		[ImplementPropertyType("privacyCheckboxPlaceholder")]
		public IHtmlString PrivacyCheckboxPlaceholder
		{
			get { return this.GetPropertyValue<IHtmlString>("privacyCheckboxPlaceholder"); }
		}

		///<summary>
		/// Privacy Text: [privacyText]
		///</summary>
		[ImplementPropertyType("privacyText")]
		public IHtmlString PrivacyText
		{
			get { return this.GetPropertyValue<IHtmlString>("privacyText"); }
		}

		///<summary>
		/// Privacy Text Title: [privacyTextTitle]
		///</summary>
		[ImplementPropertyType("privacyTextTitle")]
		public string PrivacyTextTitle
		{
			get { return this.GetPropertyValue<string>("privacyTextTitle"); }
		}

		///<summary>
		/// Select Thank You
		///</summary>
		[ImplementPropertyType("redirectForThankYouPage")]
		public RJP.MultiUrlPicker.Models.MultiUrls RedirectForThankYouPage
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("redirectForThankYouPage"); }
		}

		///<summary>
		/// Submit Button Text: [submitButtonText]
		///</summary>
		[ImplementPropertyType("submitButtonText")]
		public string SubmitButtonText
		{
			get { return this.GetPropertyValue<string>("submitButtonText"); }
		}

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// BCC recipient(s): [bCCRecipients] Comma separated email ids.
		///</summary>
		[ImplementPropertyType("bCCRecipients")]
		public string BCcrecipients
		{
			get { return FormsWithEmailNotification.GetBCcrecipients(this); }
		}

		///<summary>
		/// Body content: [emailReplyBody] Place holders from the form                                                                           [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE],[MESSAGE]
		///</summary>
		[ImplementPropertyType("bodyContent")]
		public IHtmlString BodyContent
		{
			get { return FormsWithEmailNotification.GetBodyContent(this); }
		}

		///<summary>
		/// E-Mail subject: [eMailSubject]You can use the following placeholders in the email subject.[DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE]
		///</summary>
		[ImplementPropertyType("eMailSubject")]
		public string EMailSubject
		{
			get { return FormsWithEmailNotification.GetEMailSubject(this); }
		}

		///<summary>
		/// From Email: From email id[fromEmail]
		///</summary>
		[ImplementPropertyType("fromEmail")]
		public string FromEmail
		{
			get { return FormsWithEmailNotification.GetFromEmail(this); }
		}

		///<summary>
		/// E-mail Body: [notificationBody] You can use the following placeholders in the email subject. [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE]
		///</summary>
		[ImplementPropertyType("notificationBody")]
		public IHtmlString NotificationBody
		{
			get { return FormsWithEmailNotification.GetNotificationBody(this); }
		}

		///<summary>
		/// Reply email subject: [replyEmailSubject]Place holders from the form [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE],[MESSAGE]
		///</summary>
		[ImplementPropertyType("replyEmailSubject")]
		public string ReplyEmailSubject
		{
			get { return FormsWithEmailNotification.GetReplyEmailSubject(this); }
		}

		///<summary>
		/// Reply to user: [replyToUser] Select this option to enable auto reply to the user.
		///</summary>
		[ImplementPropertyType("replyToUser")]
		public bool ReplyToUser
		{
			get { return FormsWithEmailNotification.GetReplyToUser(this); }
		}

		///<summary>
		/// Send notification To: [sendNotificationTo] Comma separated email ids of administrators.
		///</summary>
		[ImplementPropertyType("sendNotificationTo")]
		public string SendNotificationTo
		{
			get { return FormsWithEmailNotification.GetSendNotificationTo(this); }
		}
	}

	// Mixin content Type 1197 with alias "pagesWithNewsBoxes"
	/// <summary>Pages With News Boxes</summary>
	public partial interface IPagesWithNewsBoxes : IPublishedContent
	{
		/// <summary>Number Of News Items</summary>
		string NoOfItemsToShowInNewsBoxes { get; }
	}

	/// <summary>Pages With News Boxes</summary>
	[PublishedContentModel("pagesWithNewsBoxes")]
	public partial class PagesWithNewsBoxes : PublishedContentModel, IPagesWithNewsBoxes
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pagesWithNewsBoxes";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PagesWithNewsBoxes(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PagesWithNewsBoxes, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Number Of News Items: This will be the count for items to be displayed for News Boxes. By default the count will be 3
		///</summary>
		[ImplementPropertyType("noOfItemsToShowInNewsBoxes")]
		public string NoOfItemsToShowInNewsBoxes
		{
			get { return GetNoOfItemsToShowInNewsBoxes(this); }
		}

		/// <summary>Static getter for Number Of News Items</summary>
		public static string GetNoOfItemsToShowInNewsBoxes(IPagesWithNewsBoxes that) { return that.GetPropertyValue<string>("noOfItemsToShowInNewsBoxes"); }
	}

	/// <summary>Data Reopsitory</summary>
	[PublishedContentModel("dataReopsitory")]
	public partial class DataReopsitory : PublishedContentModel, IContentMaster
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dataReopsitory";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DataReopsitory(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DataReopsitory, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Credit Framework Phase</summary>
	[PublishedContentModel("creditFrameworkPhase")]
	public partial class CreditFrameworkPhase : PublishedContentModel, IContentMaster
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "creditFrameworkPhase";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CreditFrameworkPhase(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CreditFrameworkPhase, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Icon: Icon for the Credit Framework phase Menu inside Credit Frame Work Tabs
		///</summary>
		[ImplementPropertyType("icon")]
		public object Icon
		{
			get { return this.GetPropertyValue("icon"); }
		}

		///<summary>
		/// Phase Content Link: More info Link for the phase related content in the Framework Tab
		///</summary>
		[ImplementPropertyType("link")]
		public RJP.MultiUrlPicker.Models.MultiUrls Link
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("link"); }
		}

		///<summary>
		/// Menu Title: This will show as the title for the Credit Frame Work Phase Menu inside Credit Frame Work Tabs
		///</summary>
		[ImplementPropertyType("menuTitle")]
		public string MenuTitle
		{
			get { return this.GetPropertyValue<string>("menuTitle"); }
		}

		///<summary>
		/// Phase Content Text: This will show as the text for the phase related content in the Framework Tab
		///</summary>
		[ImplementPropertyType("text")]
		public IHtmlString Text
		{
			get { return this.GetPropertyValue<IHtmlString>("text"); }
		}

		///<summary>
		/// Phase Content Title: This will show as the title for the phase related content in the Framework Tab
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>test</summary>
	[PublishedContentModel("test")]
	public partial class Test : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "test";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Test(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Test, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Success Strories Home</summary>
	[PublishedContentModel("successStroriesHome")]
	public partial class SuccessStroriesHome : PublishedContentModel, IContentMaster, IFormsWithEmailNotification, IPages, IPagesWithBanner
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "successStroriesHome";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SuccessStroriesHome(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SuccessStroriesHome, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Company Placeholder: [companyPlaceholder]
		///</summary>
		[ImplementPropertyType("companyPlaceholder")]
		public string CompanyPlaceholder
		{
			get { return this.GetPropertyValue<string>("companyPlaceholder"); }
		}

		///<summary>
		/// Compulsory Fields Notation Text: This will show Compulsory Fields Notation Text just above the submit button[By default :  *Compulsory Fields]
		///</summary>
		[ImplementPropertyType("CompulsoryFieldsIconText")]
		public string CompulsoryFieldsIconText
		{
			get { return this.GetPropertyValue<string>("CompulsoryFieldsIconText"); }
		}

		///<summary>
		/// Email Placeholder: [emailPlaceholder]
		///</summary>
		[ImplementPropertyType("emailPlaceholder")]
		public string EmailPlaceholder
		{
			get { return this.GetPropertyValue<string>("emailPlaceholder"); }
		}

		///<summary>
		/// First Name Placeholder: [firstNamePlaceholder]
		///</summary>
		[ImplementPropertyType("firstNamePlaceholder")]
		public string FirstNamePlaceholder
		{
			get { return this.GetPropertyValue<string>("firstNamePlaceholder"); }
		}

		///<summary>
		/// Form Instruction Text: this will appears just above the forms in each product single page
		///</summary>
		[ImplementPropertyType("formInstructionText")]
		public string FormInstructionText
		{
			get { return this.GetPropertyValue<string>("formInstructionText"); }
		}

		///<summary>
		/// Industry Placeholder: [industryPlaceholder]
		///</summary>
		[ImplementPropertyType("industryPlaceholder")]
		public string IndustryPlaceholder
		{
			get { return this.GetPropertyValue<string>("industryPlaceholder"); }
		}

		///<summary>
		/// Job Title Placeholder: [jobTitlePlaceholder]
		///</summary>
		[ImplementPropertyType("jobTitlePlaceholder")]
		public string JobTitlePlaceholder
		{
			get { return this.GetPropertyValue<string>("jobTitlePlaceholder"); }
		}

		///<summary>
		/// Last Name Placeholder: [lastNamePlaceholder]
		///</summary>
		[ImplementPropertyType("lastNamePlaceholder")]
		public string LastNamePlaceholder
		{
			get { return this.GetPropertyValue<string>("lastNamePlaceholder"); }
		}

		///<summary>
		/// Newsletter Checkbox Placeholder: [newsletterCheckboxPlaceholder]
		///</summary>
		[ImplementPropertyType("newsletterCheckboxPlaceholder")]
		public IHtmlString NewsletterCheckboxPlaceholder
		{
			get { return this.GetPropertyValue<IHtmlString>("newsletterCheckboxPlaceholder"); }
		}

		///<summary>
		/// No items Found message
		///</summary>
		[ImplementPropertyType("noItemsFoundMessage")]
		public string NoItemsFoundMessage
		{
			get { return this.GetPropertyValue<string>("noItemsFoundMessage"); }
		}

		///<summary>
		/// Phone Number Placeholder: [phoneNumberPlaceholder]
		///</summary>
		[ImplementPropertyType("phoneNumberPlaceholder")]
		public string PhoneNumberPlaceholder
		{
			get { return this.GetPropertyValue<string>("phoneNumberPlaceholder"); }
		}

		///<summary>
		/// Privacy Checkbox Placeholder: [privacyCheckboxPlaceholder]
		///</summary>
		[ImplementPropertyType("privacyCheckboxPlaceholder")]
		public IHtmlString PrivacyCheckboxPlaceholder
		{
			get { return this.GetPropertyValue<IHtmlString>("privacyCheckboxPlaceholder"); }
		}

		///<summary>
		/// Privacy Text: [privacyText]
		///</summary>
		[ImplementPropertyType("privacyText")]
		public IHtmlString PrivacyText
		{
			get { return this.GetPropertyValue<IHtmlString>("privacyText"); }
		}

		///<summary>
		/// Privacy Text Title: [privacyTextTitle]
		///</summary>
		[ImplementPropertyType("privacyTextTitle")]
		public string PrivacyTextTitle
		{
			get { return this.GetPropertyValue<string>("privacyTextTitle"); }
		}

		///<summary>
		/// Submit Button Text: submitButtonText
		///</summary>
		[ImplementPropertyType("submitButtonText")]
		public string SubmitButtonText
		{
			get { return this.GetPropertyValue<string>("submitButtonText"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// BCC recipient(s): [bCCRecipients] Comma separated email ids.
		///</summary>
		[ImplementPropertyType("bCCRecipients")]
		public string BCcrecipients
		{
			get { return FormsWithEmailNotification.GetBCcrecipients(this); }
		}

		///<summary>
		/// Body content: [emailReplyBody] Place holders from the form                                                                           [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE],[MESSAGE]
		///</summary>
		[ImplementPropertyType("bodyContent")]
		public IHtmlString BodyContent
		{
			get { return FormsWithEmailNotification.GetBodyContent(this); }
		}

		///<summary>
		/// E-Mail subject: [eMailSubject]You can use the following placeholders in the email subject.[DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE]
		///</summary>
		[ImplementPropertyType("eMailSubject")]
		public string EMailSubject
		{
			get { return FormsWithEmailNotification.GetEMailSubject(this); }
		}

		///<summary>
		/// From Email: From email id[fromEmail]
		///</summary>
		[ImplementPropertyType("fromEmail")]
		public string FromEmail
		{
			get { return FormsWithEmailNotification.GetFromEmail(this); }
		}

		///<summary>
		/// E-mail Body: [notificationBody] You can use the following placeholders in the email subject. [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE]
		///</summary>
		[ImplementPropertyType("notificationBody")]
		public IHtmlString NotificationBody
		{
			get { return FormsWithEmailNotification.GetNotificationBody(this); }
		}

		///<summary>
		/// Reply email subject: [replyEmailSubject]Place holders from the form [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE],[MESSAGE]
		///</summary>
		[ImplementPropertyType("replyEmailSubject")]
		public string ReplyEmailSubject
		{
			get { return FormsWithEmailNotification.GetReplyEmailSubject(this); }
		}

		///<summary>
		/// Reply to user: [replyToUser] Select this option to enable auto reply to the user.
		///</summary>
		[ImplementPropertyType("replyToUser")]
		public bool ReplyToUser
		{
			get { return FormsWithEmailNotification.GetReplyToUser(this); }
		}

		///<summary>
		/// Send notification To: [sendNotificationTo] Comma separated email ids of administrators.
		///</summary>
		[ImplementPropertyType("sendNotificationTo")]
		public string SendNotificationTo
		{
			get { return FormsWithEmailNotification.GetSendNotificationTo(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}

		///<summary>
		/// Background Image: Select the background image for the section. Image size: 1600 X 500 px
		///</summary>
		[ImplementPropertyType("backgroundImage")]
		public object BackgroundImage
		{
			get { return PagesWithBanner.GetBackgroundImage(this); }
		}

		///<summary>
		/// Banner description
		///</summary>
		[ImplementPropertyType("bannerDescription")]
		public IHtmlString BannerDescription
		{
			get { return PagesWithBanner.GetBannerDescription(this); }
		}

		///<summary>
		/// Banner Text Color: style for the text's color over the image(default:white)
		///</summary>
		[ImplementPropertyType("bannerTextColor")]
		public object BannerTextColor
		{
			get { return PagesWithBanner.GetBannerTextColor(this); }
		}

		///<summary>
		/// Banner Title
		///</summary>
		[ImplementPropertyType("bannerTitle")]
		public string BannerTitle
		{
			get { return PagesWithBanner.GetBannerTitle(this); }
		}

		///<summary>
		/// Mobile Background Image: This image will show as the background image for mobile devices. Image dimension 1099px X 548px [mobileBackgroundImage]
		///</summary>
		[ImplementPropertyType("mobileBackgroundImage")]
		public object MobileBackgroundImage
		{
			get { return PagesWithBanner.GetMobileBackgroundImage(this); }
		}
	}

	/// <summary>Success Single</summary>
	[PublishedContentModel("successSingle")]
	public partial class SuccessSingle : PublishedContentModel, IContentMaster, IPages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "successSingle";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SuccessSingle(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SuccessSingle, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Body Text
		///</summary>
		[ImplementPropertyType("bodyText")]
		public IHtmlString BodyText
		{
			get { return this.GetPropertyValue<IHtmlString>("bodyText"); }
		}

		///<summary>
		/// Framework Phase Tags
		///</summary>
		[ImplementPropertyType("freameworkPhaseTags")]
		public string FreameworkPhaseTags
		{
			get { return this.GetPropertyValue<string>("freameworkPhaseTags"); }
		}

		///<summary>
		/// Hide Contact Us Link: This will hide the Right Side Contact Us Link
		///</summary>
		[ImplementPropertyType("hideContactUsLink")]
		public bool HideContactUsLink
		{
			get { return this.GetPropertyValue<bool>("hideContactUsLink"); }
		}

		///<summary>
		/// Hide Schedule Consultation Link: This will hide the right side Schedule Consultation Link
		///</summary>
		[ImplementPropertyType("hideScheduleConsultationLink")]
		public bool HideScheduleConsultationLink
		{
			get { return this.GetPropertyValue<bool>("hideScheduleConsultationLink"); }
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public object Image
		{
			get { return this.GetPropertyValue("image"); }
		}

		///<summary>
		/// Industry Tags
		///</summary>
		[ImplementPropertyType("industryTags")]
		public string IndustryTags
		{
			get { return this.GetPropertyValue<string>("industryTags"); }
		}

		///<summary>
		/// Publication date
		///</summary>
		[ImplementPropertyType("publicationDate")]
		public DateTime PublicationDate
		{
			get { return this.GetPropertyValue<DateTime>("publicationDate"); }
		}

		///<summary>
		/// Short Description
		///</summary>
		[ImplementPropertyType("shortDescription")]
		public string ShortDescription
		{
			get { return this.GetPropertyValue<string>("shortDescription"); }
		}

		///<summary>
		/// Show Social Media Share Buttons
		///</summary>
		[ImplementPropertyType("showSocialMediaShareButtons")]
		public bool ShowSocialMediaShareButtons
		{
			get { return this.GetPropertyValue<bool>("showSocialMediaShareButtons"); }
		}

		///<summary>
		/// Subtitle
		///</summary>
		[ImplementPropertyType("subtitle")]
		public IHtmlString Subtitle
		{
			get { return this.GetPropertyValue<IHtmlString>("subtitle"); }
		}

		///<summary>
		/// Thumbnail Image
		///</summary>
		[ImplementPropertyType("thumbnailImage")]
		public object ThumbnailImage
		{
			get { return this.GetPropertyValue("thumbnailImage"); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}
	}

	/// <summary>Thank You</summary>
	[PublishedContentModel("thankYou")]
	public partial class ThankYou : PublishedContentModel, IContentMaster
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "thankYou";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ThankYou(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ThankYou, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// BodyText: [bodyText]
		///</summary>
		[ImplementPropertyType("bodyText")]
		public IHtmlString BodyText
		{
			get { return this.GetPropertyValue<IHtmlString>("bodyText"); }
		}

		///<summary>
		/// Custom Paragraph text: The text will  show just above the 3 boxes content
		///</summary>
		[ImplementPropertyType("customParagraphText")]
		public IHtmlString CustomParagraphText
		{
			get { return this.GetPropertyValue<IHtmlString>("customParagraphText"); }
		}

		///<summary>
		/// Three Box Content: This will  show as the content for the 3 boxes below the body text
		///</summary>
		[ImplementPropertyType("threeBoxContent")]
		public Archetype.Models.ArchetypeModel ThreeBoxContent
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("threeBoxContent"); }
		}

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}
	}

	// Mixin content Type 1258 with alias "formsWithEmailNotification"
	/// <summary>Forms With Email notification</summary>
	public partial interface IFormsWithEmailNotification : IPublishedContent
	{
		/// <summary>BCC recipient(s)</summary>
		string BCcrecipients { get; }

		/// <summary>Body content</summary>
		IHtmlString BodyContent { get; }

		/// <summary>E-Mail subject</summary>
		string EMailSubject { get; }

		/// <summary>From Email</summary>
		string FromEmail { get; }

		/// <summary>E-mail Body</summary>
		IHtmlString NotificationBody { get; }

		/// <summary>Reply email subject</summary>
		string ReplyEmailSubject { get; }

		/// <summary>Reply to user</summary>
		bool ReplyToUser { get; }

		/// <summary>Send notification To</summary>
		string SendNotificationTo { get; }
	}

	/// <summary>Forms With Email notification</summary>
	[PublishedContentModel("formsWithEmailNotification")]
	public partial class FormsWithEmailNotification : PublishedContentModel, IFormsWithEmailNotification
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "formsWithEmailNotification";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FormsWithEmailNotification(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FormsWithEmailNotification, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// BCC recipient(s): [bCCRecipients] Comma separated email ids.
		///</summary>
		[ImplementPropertyType("bCCRecipients")]
		public string BCcrecipients
		{
			get { return GetBCcrecipients(this); }
		}

		/// <summary>Static getter for BCC recipient(s)</summary>
		public static string GetBCcrecipients(IFormsWithEmailNotification that) { return that.GetPropertyValue<string>("bCCRecipients"); }

		///<summary>
		/// Body content: [emailReplyBody] Place holders from the form                                                                           [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE],[MESSAGE]
		///</summary>
		[ImplementPropertyType("bodyContent")]
		public IHtmlString BodyContent
		{
			get { return GetBodyContent(this); }
		}

		/// <summary>Static getter for Body content</summary>
		public static IHtmlString GetBodyContent(IFormsWithEmailNotification that) { return that.GetPropertyValue<IHtmlString>("bodyContent"); }

		///<summary>
		/// E-Mail subject: [eMailSubject]You can use the following placeholders in the email subject.[DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE]
		///</summary>
		[ImplementPropertyType("eMailSubject")]
		public string EMailSubject
		{
			get { return GetEMailSubject(this); }
		}

		/// <summary>Static getter for E-Mail subject</summary>
		public static string GetEMailSubject(IFormsWithEmailNotification that) { return that.GetPropertyValue<string>("eMailSubject"); }

		///<summary>
		/// From Email: From email id[fromEmail]
		///</summary>
		[ImplementPropertyType("fromEmail")]
		public string FromEmail
		{
			get { return GetFromEmail(this); }
		}

		/// <summary>Static getter for From Email</summary>
		public static string GetFromEmail(IFormsWithEmailNotification that) { return that.GetPropertyValue<string>("fromEmail"); }

		///<summary>
		/// E-mail Body: [notificationBody] You can use the following placeholders in the email subject. [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE]
		///</summary>
		[ImplementPropertyType("notificationBody")]
		public IHtmlString NotificationBody
		{
			get { return GetNotificationBody(this); }
		}

		/// <summary>Static getter for E-mail Body</summary>
		public static IHtmlString GetNotificationBody(IFormsWithEmailNotification that) { return that.GetPropertyValue<IHtmlString>("notificationBody"); }

		///<summary>
		/// Reply email subject: [replyEmailSubject]Place holders from the form [DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL], [INDUSTRY],[TELEPHONE],[MESSAGE]
		///</summary>
		[ImplementPropertyType("replyEmailSubject")]
		public string ReplyEmailSubject
		{
			get { return GetReplyEmailSubject(this); }
		}

		/// <summary>Static getter for Reply email subject</summary>
		public static string GetReplyEmailSubject(IFormsWithEmailNotification that) { return that.GetPropertyValue<string>("replyEmailSubject"); }

		///<summary>
		/// Reply to user: [replyToUser] Select this option to enable auto reply to the user.
		///</summary>
		[ImplementPropertyType("replyToUser")]
		public bool ReplyToUser
		{
			get { return GetReplyToUser(this); }
		}

		/// <summary>Static getter for Reply to user</summary>
		public static bool GetReplyToUser(IFormsWithEmailNotification that) { return that.GetPropertyValue<bool>("replyToUser"); }

		///<summary>
		/// Send notification To: [sendNotificationTo] Comma separated email ids of administrators.
		///</summary>
		[ImplementPropertyType("sendNotificationTo")]
		public string SendNotificationTo
		{
			get { return GetSendNotificationTo(this); }
		}

		/// <summary>Static getter for Send notification To</summary>
		public static string GetSendNotificationTo(IFormsWithEmailNotification that) { return that.GetPropertyValue<string>("sendNotificationTo"); }
	}

	/// <summary>Consumer Internal</summary>
	[PublishedContentModel("consumerInternal")]
	public partial class ConsumerInternal : PublishedContentModel, IContentMaster, IPages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "consumerInternal";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ConsumerInternal(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConsumerInternal, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Body Text: [bodyContent]
		///</summary>
		[ImplementPropertyType("bodyContent")]
		public IHtmlString BodyContent
		{
			get { return this.GetPropertyValue<IHtmlString>("bodyContent"); }
		}

		///<summary>
		/// Introduction Text: [introductionText]
		///</summary>
		[ImplementPropertyType("introductionText")]
		public IHtmlString IntroductionText
		{
			get { return this.GetPropertyValue<IHtmlString>("introductionText"); }
		}

		///<summary>
		/// Link Boxes: The content will show just below the body text data
		///</summary>
		[ImplementPropertyType("linkBoxes")]
		public Archetype.Models.ArchetypeModel LinkBoxes
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("linkBoxes"); }
		}

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}
	}

	/// <summary>Consumer Main</summary>
	[PublishedContentModel("consumerMain")]
	public partial class ConsumerMain : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "consumerMain";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ConsumerMain(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConsumerMain, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide from navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}
	}

	/// <summary>Shedule Consultation</summary>
	[PublishedContentModel("sheduleConsultation")]
	public partial class SheduleConsultation : PublishedContentModel, IContentMaster, IPages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sheduleConsultation";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SheduleConsultation(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SheduleConsultation, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// BCC recipient(s): [bCCRecipients] Comma separated email ids.
		///</summary>
		[ImplementPropertyType("bCCRecipients")]
		public string BCcrecipients
		{
			get { return this.GetPropertyValue<string>("bCCRecipients"); }
		}

		///<summary>
		/// Best Way To Reach Options: This will populated in Best Way To Reach Drop down inside the forms
		///</summary>
		[ImplementPropertyType("bestWayToReachOptions")]
		public Archetype.Models.ArchetypeModel BestWayToReachOptions
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("bestWayToReachOptions"); }
		}

		///<summary>
		/// Best Way To Reach Placeholder: [Best Way To Reach Placeholder]
		///</summary>
		[ImplementPropertyType("bestWayToReachPlaceholder")]
		public string BestWayToReachPlaceholder
		{
			get { return this.GetPropertyValue<string>("bestWayToReachPlaceholder"); }
		}

		///<summary>
		/// Body content: [emailReplyBody] Place holders from the form                                                                           [DATE], [FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL],[INDUSTRY],[TELEPHONE],[BESTWAYTOREACH],[MESSAGE]
		///</summary>
		[ImplementPropertyType("bodyContent")]
		public IHtmlString BodyContent
		{
			get { return this.GetPropertyValue<IHtmlString>("bodyContent"); }
		}

		///<summary>
		/// Company Placeholder: [ompanyPlaceholder]
		///</summary>
		[ImplementPropertyType("companyPlaceholder")]
		public string CompanyPlaceholder
		{
			get { return this.GetPropertyValue<string>("companyPlaceholder"); }
		}

		///<summary>
		/// Compulsory Fields Notation Text: This will show Compulsory Fields Notation Text just above the submit button[By default :  *Compulsory Fields]
		///</summary>
		[ImplementPropertyType("CompulsoryFieldsIconText")]
		public string CompulsoryFieldsIconText
		{
			get { return this.GetPropertyValue<string>("CompulsoryFieldsIconText"); }
		}

		///<summary>
		/// Email Placeholder: [emailPlaceholder]
		///</summary>
		[ImplementPropertyType("emailPlaceholder")]
		public string EmailPlaceholder
		{
			get { return this.GetPropertyValue<string>("emailPlaceholder"); }
		}

		///<summary>
		/// E-Mail subject: [eMailSubject]You can use the following placeholders in the email subject.[DATE],[FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL],[INDUSTRY],[TELEPHONE],[BESTWAYTOREACH],[MESSAGE]
		///</summary>
		[ImplementPropertyType("eMailSubject")]
		public string EMailSubject
		{
			get { return this.GetPropertyValue<string>("eMailSubject"); }
		}

		///<summary>
		/// First Name Placeholder: firstNamePlaceholder
		///</summary>
		[ImplementPropertyType("firstNamePlaceholder")]
		public string FirstNamePlaceholder
		{
			get { return this.GetPropertyValue<string>("firstNamePlaceholder"); }
		}

		///<summary>
		/// From Email: From email id[fromEmail]
		///</summary>
		[ImplementPropertyType("fromEmail")]
		public string FromEmail
		{
			get { return this.GetPropertyValue<string>("fromEmail"); }
		}

		///<summary>
		/// Industry Placeholder: [industryPlaceholder]
		///</summary>
		[ImplementPropertyType("industryPlaceholder")]
		public string IndustryPlaceholder
		{
			get { return this.GetPropertyValue<string>("industryPlaceholder"); }
		}

		///<summary>
		/// Job Title Placeholder: [jobTitlePlaceholder]
		///</summary>
		[ImplementPropertyType("jobTitlePlaceholder")]
		public string JobTitlePlaceholder
		{
			get { return this.GetPropertyValue<string>("jobTitlePlaceholder"); }
		}

		///<summary>
		/// Last Name Placeholder: lastNamePlaceholder
		///</summary>
		[ImplementPropertyType("lastNamePlaceholder")]
		public string LastNamePlaceholder
		{
			get { return this.GetPropertyValue<string>("lastNamePlaceholder"); }
		}

		///<summary>
		/// How did you hear about us  Options: This will populated in How did you hear about us Drop down inside the forms
		///</summary>
		[ImplementPropertyType("mediaSourceOptions")]
		public Archetype.Models.ArchetypeModel MediaSourceOptions
		{
			get { return this.GetPropertyValue<Archetype.Models.ArchetypeModel>("mediaSourceOptions"); }
		}

		///<summary>
		/// How did you hear about Placeholder: [MediaSourcePlaceholder]
		///</summary>
		[ImplementPropertyType("MediaSourcePlaceholder")]
		public string MediaSourcePlaceholder
		{
			get { return this.GetPropertyValue<string>("MediaSourcePlaceholder"); }
		}

		///<summary>
		/// Message Placeholder: [messagePlaceholder]
		///</summary>
		[ImplementPropertyType("messagePlaceholder")]
		public string MessagePlaceholder
		{
			get { return this.GetPropertyValue<string>("messagePlaceholder"); }
		}

		///<summary>
		/// Newsletter Checkbox Placeholder: [newsletterCheckboxPlaceholder]
		///</summary>
		[ImplementPropertyType("newsletterCheckboxPlaceholder")]
		public IHtmlString NewsletterCheckboxPlaceholder
		{
			get { return this.GetPropertyValue<IHtmlString>("newsletterCheckboxPlaceholder"); }
		}

		///<summary>
		/// News Single CTA Label: This will show as the text for the CTA links on the right side of news single,product single ,success single pages
		///</summary>
		[ImplementPropertyType("newsSingleCTALabel")]
		public string NewsSingleCtalabel
		{
			get { return this.GetPropertyValue<string>("newsSingleCTALabel"); }
		}

		///<summary>
		/// E-mail Body: [notificationBody] You can use the following placeholders in the email subject.[DATE], [FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL],[INDUSTRY],[TELEPHONE],[BESTWAYTOREACH],[MESSAGE]
		///</summary>
		[ImplementPropertyType("notificationBody")]
		public IHtmlString NotificationBody
		{
			get { return this.GetPropertyValue<IHtmlString>("notificationBody"); }
		}

		///<summary>
		/// Telephone Number Placeholde: [phoneNumberPlaceholder]
		///</summary>
		[ImplementPropertyType("phoneNumberPlaceholder")]
		public string PhoneNumberPlaceholder
		{
			get { return this.GetPropertyValue<string>("phoneNumberPlaceholder"); }
		}

		///<summary>
		/// Preferred date Placeholder: [prefferedDateLabel]
		///</summary>
		[ImplementPropertyType("prefferedDateLabel")]
		public string PrefferedDateLabel
		{
			get { return this.GetPropertyValue<string>("prefferedDateLabel"); }
		}

		///<summary>
		/// Privacy Checkbox Placeholder: [privacyCheckboxPlaceholder]
		///</summary>
		[ImplementPropertyType("privacyCheckboxPlaceholder")]
		public IHtmlString PrivacyCheckboxPlaceholder
		{
			get { return this.GetPropertyValue<IHtmlString>("privacyCheckboxPlaceholder"); }
		}

		///<summary>
		/// Privacy Text: [privacyText]
		///</summary>
		[ImplementPropertyType("privacyText")]
		public IHtmlString PrivacyText
		{
			get { return this.GetPropertyValue<IHtmlString>("privacyText"); }
		}

		///<summary>
		/// Privacy Text Title: [privacyTextTitle]
		///</summary>
		[ImplementPropertyType("privacyTextTitle")]
		public string PrivacyTextTitle
		{
			get { return this.GetPropertyValue<string>("privacyTextTitle"); }
		}

		///<summary>
		/// Select Thank You page: Select Thank You page
		///</summary>
		[ImplementPropertyType("redirectForThankYouPage")]
		public RJP.MultiUrlPicker.Models.MultiUrls RedirectForThankYouPage
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("redirectForThankYouPage"); }
		}

		///<summary>
		/// Reply email subject: [replyEmailSubject]Place holders from the form [DATE], [FIRSTNAME], [LASTNAME],[JOBTITLE],[COMPANY],[EMAIL],[INDUSTRY],[TELEPHONE],[BESTWAYTOREACH],[MESSAGE]
		///</summary>
		[ImplementPropertyType("replyEmailSubject")]
		public string ReplyEmailSubject
		{
			get { return this.GetPropertyValue<string>("replyEmailSubject"); }
		}

		///<summary>
		/// Reply to user: [replyToUser] Select this option to enable auto reply to the user.
		///</summary>
		[ImplementPropertyType("replyToUser")]
		public bool ReplyToUser
		{
			get { return this.GetPropertyValue<bool>("replyToUser"); }
		}

		///<summary>
		/// Send notification To: [sendNotificationTo] Comma separated email ids of administrators.
		///</summary>
		[ImplementPropertyType("sendNotificationTo")]
		public string SendNotificationTo
		{
			get { return this.GetPropertyValue<string>("sendNotificationTo"); }
		}

		///<summary>
		/// Submit Button Text: submit button text
		///</summary>
		[ImplementPropertyType("submitButtonText")]
		public string SubmitButtonText
		{
			get { return this.GetPropertyValue<string>("submitButtonText"); }
		}

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}
	}

	/// <summary>Contact Home</summary>
	[PublishedContentModel("contactHome")]
	public partial class ContactHome : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactHome";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactHome(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactHome, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide From Navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}
	}

	/// <summary>Page Not Found</summary>
	[PublishedContentModel("pageNotFound")]
	public partial class PageNotFound : PublishedContentModel, IContentMaster, IPages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pageNotFound";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PageNotFound(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageNotFound, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Body Text
		///</summary>
		[ImplementPropertyType("bodyText")]
		public IHtmlString BodyText
		{
			get { return this.GetPropertyValue<IHtmlString>("bodyText"); }
		}

		///<summary>
		/// Search Box Placeholder: Search Box Placeholder
		///</summary>
		[ImplementPropertyType("searchBoxPlaceholder")]
		public string SearchBoxPlaceholder
		{
			get { return this.GetPropertyValue<string>("searchBoxPlaceholder"); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}
	}

	/// <summary>Standard Page</summary>
	[PublishedContentModel("standardPage")]
	public partial class StandardPage : PublishedContentModel, IContentMaster, IPages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "standardPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public StandardPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<StandardPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Body Text: [bodyText]
		///</summary>
		[ImplementPropertyType("bodyText")]
		public IHtmlString BodyText
		{
			get { return this.GetPropertyValue<IHtmlString>("bodyText"); }
		}

		///<summary>
		/// Title: [title]
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Browser Title: The browser title appears in the bar at the top of your browser window. [browserTitle]
		///</summary>
		[ImplementPropertyType("browserTitle")]
		public string BrowserTitle
		{
			get { return ContentMaster.GetBrowserTitle(this); }
		}

		///<summary>
		/// Disable Link: [disableLink]{br} Check if the disable link on main navigation 
		///</summary>
		[ImplementPropertyType("disableLink")]
		public bool DisableLink
		{
			get { return ContentMaster.GetDisableLink(this); }
		}

		///<summary>
		/// External Redirect: Redirect to an external page. [externalRedirect]
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return ContentMaster.GetExternalRedirect(this); }
		}

		///<summary>
		/// Hide child pages in main navigation: If checked it will hide the child pages of this page in main navagation [hideChildPagesInMainNavigation]
		///</summary>
		[ImplementPropertyType("hideChildPagesInMainNavigation")]
		public bool HideChildPagesInMainNavigation
		{
			get { return ContentMaster.GetHideChildPagesInMainNavigation(this); }
		}

		///<summary>
		/// Hide From Search: Check this if the current page should be hidden from site search.{br/}[hideFromSearch]
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return ContentMaster.GetHideFromSearch(this); }
		}

		///<summary>
		/// Hide From Sitemap: Check if the page should not be shown in the sitemap.  [hideFromSitemap]
		///</summary>
		[ImplementPropertyType("hideFromSitemap")]
		public bool HideFromSitemap
		{
			get { return ContentMaster.GetHideFromSitemap(this); }
		}

		///<summary>
		/// Menu Title: Alternative text for the main menu title, by default it will be the page name [menuAlternateText]
		///</summary>
		[ImplementPropertyType("menuAlternateText")]
		public string MenuAlternateText
		{
			get { return ContentMaster.GetMenuAlternateText(this); }
		}

		///<summary>
		/// Meta Description: Meta descriptions are HTML attributes that provide concise explanations of the contents of web pages.{br /} [metaDescription]
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return ContentMaster.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords: It  tell search engines what the topic of the page is. {br /}[metaKeywords]
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return ContentMaster.GetMetaKeywords(this); }
		}

		///<summary>
		/// Social Media Description: [socialMediaDescription]  This is where you describe your content. it shows below the link title on Facebook. {br /}[socialMediaDescription]
		///</summary>
		[ImplementPropertyType("socialMediaDescription")]
		public string SocialMediaDescription
		{
			get { return ContentMaster.GetSocialMediaDescription(this); }
		}

		///<summary>
		/// Social Media Image: Use images that are at least 1200 x 630 pixels for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels to display link page posts with larger images. If your image is smaller than 600 x 315 px, it will still display in the link page post, but the size will be much smaller.The minimum image size is 200 x 200 pixels. Use FB Debugger https://developers.facebook.com/tools/debug/ to remove cache. {br /}[socialMediaImage]
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public object SocialMediaImage
		{
			get { return ContentMaster.GetSocialMediaImage(this); }
		}

		///<summary>
		/// Social Media Title: It tells the browsers (or other web services) specific information about the page. [socialMediaTitle]
		///</summary>
		[ImplementPropertyType("socialMediaTitle")]
		public string SocialMediaTitle
		{
			get { return ContentMaster.GetSocialMediaTitle(this); }
		}

		///<summary>
		/// Redirect to internal page without Changing URL: Redirect to an Internal page. [umbracoInternalRedirectId]
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return ContentMaster.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide From Navigation: Check if the page should not be shown in the main navigation and all other listings in the throughout the website.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return ContentMaster.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to an Internal page: page link will be redirected to selected link. [umbracoRedirect]
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return ContentMaster.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Url Alias: This property allows you to give the node multiple URLs using a textstring property. Separate names with a comma. Note: It will not work if you include the leading slash or the trailing .aspx. [umbracoUrlAlias]
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return ContentMaster.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Url Name: This property allows you to change the URL of the node without changing the name of the node/page you have. {br/}[umbracoUrlName]
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return ContentMaster.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Breadcrumb Color: Choose the appropriate color for breadcrumbs The default color is [#77787b]
		///</summary>
		[ImplementPropertyType("breadcrumbColor")]
		public object BreadcrumbColor
		{
			get { return Pages.GetBreadcrumbColor(this); }
		}
	}

	/// <summary>Banner With Extending Video</summary>
	[PublishedContentModel("bannerWithExtendingVideo")]
	public partial class BannerWithExtendingVideo : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "bannerWithExtendingVideo";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public BannerWithExtendingVideo(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BannerWithExtendingVideo, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Banner Description: [bannerDescription]
		///</summary>
		[ImplementPropertyType("bannerDescription")]
		public string BannerDescription
		{
			get { return this.GetPropertyValue<string>("bannerDescription"); }
		}

		///<summary>
		/// Banner Title: [bannerTitle]
		///</summary>
		[ImplementPropertyType("bannerTitle")]
		public string BannerTitle
		{
			get { return this.GetPropertyValue<string>("bannerTitle"); }
		}

		///<summary>
		/// Link To: [linkTo]
		///</summary>
		[ImplementPropertyType("linkTo")]
		public RJP.MultiUrlPicker.Models.MultiUrls LinkTo
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("linkTo"); }
		}

		///<summary>
		/// Video Right Align: If the video need to be aligned in the right side.
		///</summary>
		[ImplementPropertyType("videoRightAlign")]
		public bool VideoRightAlign
		{
			get { return this.GetPropertyValue<bool>("videoRightAlign"); }
		}

		///<summary>
		/// Youtube Or Vimeo Url: [youtubeOrVimeoUrl]
		///</summary>
		[ImplementPropertyType("youtubeOrVimeoUrl")]
		public string YoutubeOrVimeoUrl
		{
			get { return this.GetPropertyValue<string>("youtubeOrVimeoUrl"); }
		}
	}

	/// <summary>Folder</summary>
	[PublishedContentModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Folder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Folder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contents:
		///</summary>
		[ImplementPropertyType("contents")]
		public object Contents
		{
			get { return this.GetPropertyValue("contents"); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("Image")]
	public partial class Image : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Image";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Image(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload image
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Web.Models.ImageCropDataSet UmbracoFile
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("umbracoFile"); }
		}

		///<summary>
		/// Height
		///</summary>
		[ImplementPropertyType("umbracoHeight")]
		public string UmbracoHeight
		{
			get { return this.GetPropertyValue<string>("umbracoHeight"); }
		}

		///<summary>
		/// Width
		///</summary>
		[ImplementPropertyType("umbracoWidth")]
		public string UmbracoWidth
		{
			get { return this.GetPropertyValue<string>("umbracoWidth"); }
		}
	}

	/// <summary>File</summary>
	[PublishedContentModel("File")]
	public partial class File : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "File";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public File(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload file
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public object UmbracoFile
		{
			get { return this.GetPropertyValue("umbracoFile"); }
		}
	}

	/// <summary>Image Slider</summary>
	[PublishedContentModel("imageSlider")]
	public partial class ImageSlider : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "imageSlider";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public ImageSlider(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ImageSlider, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Text Color: Default : white
		///</summary>
		[ImplementPropertyType("colorForTheTextOverPicture")]
		public object ColorForTheTextOverPicture
		{
			get { return this.GetPropertyValue("colorForTheTextOverPicture"); }
		}

		///<summary>
		/// Image: This image will shows in the slider. Image dimension 885px  X 370px [image]
		///</summary>
		[ImplementPropertyType("image")]
		public object Image
		{
			get { return this.GetPropertyValue("image"); }
		}

		///<summary>
		/// Link
		///</summary>
		[ImplementPropertyType("link")]
		public RJP.MultiUrlPicker.Models.MultiUrls Link
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.MultiUrls>("link"); }
		}

		///<summary>
		/// Short Description
		///</summary>
		[ImplementPropertyType("shortDescription")]
		public IHtmlString ShortDescription
		{
			get { return this.GetPropertyValue<IHtmlString>("shortDescription"); }
		}

		///<summary>
		/// Slider Title
		///</summary>
		[ImplementPropertyType("sliderTitle")]
		public string SliderTitle
		{
			get { return this.GetPropertyValue<string>("sliderTitle"); }
		}

		///<summary>
		/// Sub Title
		///</summary>
		[ImplementPropertyType("subTitle")]
		public IHtmlString SubTitle
		{
			get { return this.GetPropertyValue<IHtmlString>("subTitle"); }
		}

		///<summary>
		/// Hide From Slider
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}
	}

	/// <summary>Testimonial Slider</summary>
	[PublishedContentModel("testimonialSlider")]
	public partial class TestimonialSlider : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "testimonialSlider";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public TestimonialSlider(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<TestimonialSlider, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Icon
		///</summary>
		[ImplementPropertyType("icon")]
		public object Icon
		{
			get { return this.GetPropertyValue("icon"); }
		}

		///<summary>
		/// Short Description
		///</summary>
		[ImplementPropertyType("shortDescription")]
		public IHtmlString ShortDescription
		{
			get { return this.GetPropertyValue<IHtmlString>("shortDescription"); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}
	}

	/// <summary>Member</summary>
	[PublishedContentModel("Member")]
	public partial class Member : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Member";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public Member(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

}
